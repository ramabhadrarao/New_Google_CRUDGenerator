<?php
// generator_helpers/ApiGeneratorHelper.php - Enhanced Version

/**
 * API Generator Helper Trait
 * 
 * Provides methods for generating REST API endpoints for CRUD operations
 */
trait ApiGeneratorHelper {
    /**
     * Generate the REST API file for the table
     * 
     * @return string Path to the generated file
     */
    private function generateRestApiFile(): string {
        $apiPath = $this->projectBaseDir . "/api/{$this->tableName}.php";
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));

        $content = "<?php\n";
        $content .= "// api/{$this->tableName}.php - Generated by AdvancedCRUDGenerator 2.0\n";
        $content .= "require_once(__DIR__ . '/../includes/session.php'); // For authentication and permissions\n";
        $content .= "require_once(__DIR__ . '/../includes/dbconfig.php'); // Database connection\n";
        $content .= "require_once(__DIR__ . '/../includes/utilities.php'); // Helper functions\n";
        $content .= "require_once(__DIR__ . '/../includes/api_helper.php'); // API-specific utilities\n\n";

        // Set headers for API responses
        $content .= "// Set appropriate headers for API\n";
        $content .= "header('Content-Type: application/json');\n";
        $content .= "header('Access-Control-Allow-Origin: *'); // Or configure specific domains\n";
        $content .= "header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');\n";
        $content .= "header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');\n\n";

        // Handle preflight requests
        $content .= "// Handle preflight OPTIONS requests\n";
        $content .= "if (\$_SERVER['REQUEST_METHOD'] === 'OPTIONS') {\n";
        $content .= "    http_response_code(200);\n";
        $content .= "    exit;\n";
        $content .= "}\n\n";

        // Parse request path and method
        $content .= "// Get HTTP method and request parts\n";
        $content .= "\$method = \$_SERVER['REQUEST_METHOD'];\n";
        $content .= "\$id = isset(\$_GET['id']) ? (int)\$_GET['id'] : null;\n";
        $content .= "\$response = ['success' => false, 'message' => 'Invalid request method or resource.'];\n\n";

        // Authentication check
        $content .= "// API Authentication check\n";
        $content .= "// Uncomment and customize based on your auth mechanism\n";
        $content .= "/*\n";
        $content .= "if (!api_authenticate()) {\n";
        $content .= "    http_response_code(401);\n";
        $content .= "    echo json_encode(['success' => false, 'message' => 'Unauthorized. Authentication required.']);\n";
        $content .= "    exit;\n";
        $content .= "}\n";
        $content .= "*/\n\n";

        // Error handler
        $content .= "// Error handling wrapper\n";
        $content .= "try {\n";
        $content .= "    switch (\$method) {\n";
        
        // Generate API endpoints
        $content .= $this->generateGetEndpoint();
        $content .= $this->generatePostEndpoint();
        $content .= $this->generatePutEndpoint();
        $content .= $this->generateDeleteEndpoint();
        
        $content .= "        default:\n";
        $content .= "            http_response_code(405); // Method Not Allowed\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Method not allowed.'];\n";
        $content .= "            break;\n";
        $content .= "    }\n";
        $content .= "} catch (Exception \$e) {\n";
        $content .= "    // Log the error\n";
        $content .= "    error_log('API Error in {$this->tableName}.php: ' . \$e->getMessage());\n";
        $content .= "    \n";
        $content .= "    // Set appropriate status code based on the exception\n";
        $content .= "    \$statusCode = 500; // Default to Internal Server Error\n";
        $content .= "    if (\$e instanceof NotFoundException) {\n";
        $content .= "        \$statusCode = 404;\n";
        $content .= "    } elseif (\$e instanceof ValidationException) {\n";
        $content .= "        \$statusCode = 422;\n";
        $content .= "    } elseif (\$e instanceof AuthorizationException) {\n";
        $content .= "        \$statusCode = 403;\n";
        $content .= "    }\n";
        $content .= "    \n";
        $content .= "    http_response_code(\$statusCode);\n";
        $content .= "    \$response = ['success' => false, 'message' => \$e->getMessage()];\n";
        $content .= "    \n";
        $content .= "    // Include more details in development environments\n";
        $content .= "    if (defined('DEV_MODE') && DEV_MODE === true) {\n";
        $content .= "        \$response['dev_details'] = [\n";
        $content .= "            'exception' => get_class(\$e),\n";
        $content .= "            'file' => \$e->getFile(),\n";
        $content .= "            'line' => \$e->getLine(),\n";
        $content .= "            'trace' => \$e->getTraceAsString()\n";
        $content .= "        ];\n";
        $content .= "    }\n";
        $content .= "}\n\n";

        // Close DB connection and output response
        $content .= "// Close the database connection\n";
        $content .= "if (isset(\$conn) && \$conn instanceof mysqli) { \$conn->close(); }\n\n";
        
        $content .= "// Send JSON response\n";
        $content .= "echo json_encode(\$response);\n";
        $content .= "?>\n";

        try {
            // Ensure the api directory exists
            $this->ensureDirectoryExists($this->projectBaseDir . "/api");
            
            file_put_contents($apiPath, $content);
            echo "Generated REST API File: $apiPath\n";
        } catch (Exception $e) {
            throw new Exception("Error writing REST API File for {$this->tableName}: " . $e->getMessage());
        }
        
        return $apiPath;
    }

    /**
     * Generate the GET endpoint for API
     * 
     * @return string PHP code for GET endpoint
     */
    private function generateGetEndpoint(): string {
        // Determine fields to select based on column definitions and foreign keys
        $selectFields = ["`{$this->tableName}`.*"];
        $joins = "";
        
        foreach ($this->foreignKeys as $column => $fkDetails) {
            $alias = $fkDetails['table'] . "_alias_" . $column;
            $joins .= "LEFT JOIN `{$fkDetails['table']}` AS `{$alias}` ON `{$this->tableName}`.`{$column}` = `{$alias}`.`{$fkDetails['key']}`\n                        ";
            $selectFields[] = "`{$alias}`.`{$fkDetails['field']}` AS `{$fkDetails['field']}`";
        }
        
        $selectClause = implode(", ", $selectFields);
        
        return "
        case 'GET':
            // Check permissions
            if (!api_check_permission('read_{$this->tableName}')) {
                throw new AuthorizationException('Permission denied to read {$this->tableName}.');
            }
            
            if (\$id) {
                // Fetch single record by ID
                \$sql = \"SELECT {$selectClause} 
                        FROM `{$this->tableName}` 
                        {$joins}
                        WHERE `{$this->tableName}`.`{$this->primaryKey}` = ?\";
                
                \$stmt = \$conn->prepare(\$sql);
                if (!\$stmt) {
                    throw new DatabaseException('Database prepare error: ' . \$conn->error);
                }
                
                \$stmt->bind_param('i', \$id);
                if (!\$stmt->execute()) {
                    throw new DatabaseException('Database execute error: ' . \$stmt->error);
                }
                
                \$result = \$stmt->get_result();
                \$data = \$result->fetch_assoc();
                \$stmt->close();
                
                if (!\$data) {
                    throw new NotFoundException('{$tableLabel} not found with ID: ' . \$id);
                }
                
                // Process data before sending (format dates, handle special fields, etc.)
                \$data = \$this->processRecordForApi(\$data);
                
                http_response_code(200);
                \$response = ['success' => true, 'data' => \$data];
            } else {
                // Fetch all records with pagination
                \$page = isset(\$_GET['page']) ? (int)\$_GET['page'] : 1;
                \$limit = isset(\$_GET['limit']) ? (int)\$_GET['limit'] : {$this->config['itemsPerPage']};
                \$offset = (\$page - 1) * \$limit;
                
                // Search parameters
                \$search = \$_GET['search'] ?? null;
                \$sort = \$_GET['sort'] ?? '{$this->primaryKey}';
                \$order = \$_GET['order'] ?? 'DESC';
                
                // Validate sort field to prevent SQL injection
                \$validColumns = ['" . implode("', '", $this->columns) . "'];
                if (!in_array(\$sort, \$validColumns)) {
                    \$sort = '{$this->primaryKey}';
                }
                
                // Validate order direction
                \$order = strtoupper(\$order) === 'ASC' ? 'ASC' : 'DESC';
                
                // Build WHERE clause for search
                \$whereClauses = [];
                \$whereParams = [];
                \$whereTypes = '';
                
                if (\$search) {
                    \$searchLike = \"%{\$search}%\";
                    \$searchFields = [];
                    
                    // Add searchable fields
                    foreach ([" . implode(", ", array_map(function($col) {
                        return "'{$col}'";
                    }, array_filter($this->columns, function($col) {
                        return $col !== $this->primaryKey && 
                              !in_array($col, ['created_at', 'updated_at', 'created_by', 'updated_by']) &&
                              $this->getColumnFormType($col) !== 'password';
                    }))) . "] as \$field) {
                        \$searchFields[] = \"`{$this->tableName}`.`{\$field}` LIKE ?\";
                        \$whereParams[] = \$searchLike;
                        \$whereTypes .= 's';
                    }
                    
                    // Add foreign key display fields to search
                    foreach (\$this->foreignKeys as \$column => \$fkDetails) {
                        \$alias = \$fkDetails['table'] . '_alias_' . \$column;
                        \$searchFields[] = \"`{\$alias}`.`{\$fkDetails['field']}` LIKE ?\";
                        \$whereParams[] = \$searchLike;
                        \$whereTypes .= 's';
                    }
                    
                    if (\$searchFields) {
                        \$whereClauses[] = '(' . implode(' OR ', \$searchFields) . ')';
                    }
                }
                
                // Add any filters applied via query parameters
                foreach (\$_GET as \$param => \$value) {
                    // Check if parameter is a filter (format: filter_column=value)
                    if (strpos(\$param, 'filter_') === 0) {
                        \$column = substr(\$param, 7); // Remove 'filter_' prefix
                        
                        // Validate the column exists
                        if (in_array(\$column, \$validColumns)) {
                            \$whereClauses[] = \"`{$this->tableName}`.`{\$column}` = ?\";
                            \$whereParams[] = \$value;
                            \$whereTypes .= 's'; // Assuming string, adjust based on column type
                        }
                    }
                }
                
                \$whereSQL = \$whereClauses ? 'WHERE ' . implode(' AND ', \$whereClauses) : '';
                
                // Count total records for pagination
                \$countSQL = \"SELECT COUNT(DISTINCT `{$this->tableName}`.`{$this->primaryKey}`) AS total 
                            FROM `{$this->tableName}` 
                            {$joins}
                            {\$whereSQL}\";
                
                \$countStmt = \$conn->prepare(\$countSQL);
                if (\$countStmt && \$whereParams) {
                    \$countStmt->bind_param(\$whereTypes, ...\$whereParams);
                }
                
                \$totalRecords = 0;
                if (\$countStmt && \$countStmt->execute()) {
                    \$countResult = \$countStmt->get_result();
                    \$totalRecords = \$countResult->fetch_assoc()['total'] ?? 0;
                    \$countStmt->close();
                } else if (\$countStmt) {
                    throw new DatabaseException('Count query error: ' . \$countStmt->error);
                } else {
                    throw new DatabaseException('Count query prepare error: ' . \$conn->error);
                }
                
                \$totalPages = ceil(\$totalRecords / \$limit);
                
                // Fetch data with sorting and pagination
                \$dataSQL = \"SELECT {$selectClause} 
                           FROM `{$this->tableName}` 
                           {$joins}
                           {\$whereSQL} 
                           ORDER BY `{$this->tableName}`.`{\$sort}` {\$order} 
                           LIMIT ? OFFSET ?\";
                
                \$dataStmt = \$conn->prepare(\$dataSQL);
                
                // Add parameters for the main query
                \$allParams = \$whereParams;
                \$allTypes = \$whereTypes;
                \$allParams[] = \$limit;
                \$allTypes .= 'i';
                \$allParams[] = \$offset;
                \$allTypes .= 'i';
                
                if (\$dataStmt && \$allParams) {
                    \$dataStmt->bind_param(\$allTypes, ...\$allParams);
                }
                
                \$data = [];
                if (\$dataStmt && \$dataStmt->execute()) {
                    \$result = \$dataStmt->get_result();
                    while (\$row = \$result->fetch_assoc()) {
                        // Process each record before adding to response
                        \$data[] = \$this->processRecordForApi(\$row);
                    }
                    \$dataStmt->close();
                } else if (\$dataStmt) {
                    throw new DatabaseException('Data query error: ' . \$dataStmt->error);
                } else {
                    throw new DatabaseException('Data query prepare error: ' . \$conn->error);
                }
                
                http_response_code(200);
                \$response = [
                    'success' => true, 
                    'data' => \$data,
                    'pagination' => [
                        'total_records' => (int)\$totalRecords,
                        'current_page' => \$page,
                        'per_page' => \$limit,
                        'total_pages' => (int)\$totalPages
                    ],
                    'links' => [
                        'self' => api_url('{$this->tableName}', ['page' => \$page, 'limit' => \$limit]),
                        'first' => api_url('{$this->tableName}', ['page' => 1, 'limit' => \$limit]),
                        'last' => api_url('{$this->tableName}', ['page' => \$totalPages, 'limit' => \$limit]),
                        'next' => \$page < \$totalPages ? api_url('{$this->tableName}', ['page' => \$page + 1, 'limit' => \$limit]) : null,
                        'prev' => \$page > 1 ? api_url('{$this->tableName}', ['page' => \$page - 1, 'limit' => \$limit]) : null
                    ]
                ];
            }
            break;
";
    }

    /**
     * Generate the POST endpoint for API (create)
     * 
     * @return string PHP code for POST endpoint
     */
    private function generatePostEndpoint(): string {
        return "
        case 'POST':
            // Check permissions
            if (!api_check_permission('create_{$this->tableName}')) {
                throw new AuthorizationException('Permission denied to create {$this->tableName}.');
            }
            
            // Parse input data
            \$input = json_decode(file_get_contents('php://input'), true);
            if (!\$input) {
                throw new ValidationException('Invalid JSON payload.');
            }
            
            // Validate required fields
            \$validationErrors = [];
            foreach ([" . implode(", ", array_map(function($col) {
                return "'{$col}'";
            }, array_filter($this->columns, function($col) use (&$tableLabel) {
                // Include only required fields that aren't auto-generated
                return $col !== $this->primaryKey && 
                      !in_array($col, ['created_at', 'updated_at', 'created_by', 'updated_by']) &&
                      !$this->isColumnNullable($col);
            }))) . "] as \$requiredField) {
                if (!isset(\$input[\$requiredField]) || \$input[\$requiredField] === '') {
                    \$validationErrors[\$requiredField] = \$this->getColumnLabel(\$requiredField) . ' is required.';
                }
            }
            
            if (\$validationErrors) {
                throw new ValidationException('Validation failed.', \$validationErrors);
            }
            
            // Prevent setting primary key
            if (isset(\$input['{$this->primaryKey}'])) {
                unset(\$input['{$this->primaryKey}']);
            }
            
            // Begin transaction
            \$conn->begin_transaction();
            
            try {
                // Build the INSERT statement
                \$columns = [];
                \$placeholders = [];
                \$values = [];
                \$types = '';
                
                // Process input fields
                foreach (\$input as \$field => \$value) {
                    // Skip if not a valid column
                    if (!in_array(\$field, [" . implode(", ", array_map(function($col) {
                        return "'{$col}'";
                    }, array_diff($this->columns, [$this->primaryKey, 'created_at', 'updated_at', 'created_by', 'updated_by']))) . "])) {
                        continue;
                    }
                    
                    // Process based on field type
                    \$formType = \$this->getColumnFormType(\$field);
                    
                    // Convert values based on field type
                    if (\$formType === 'boolean_select' || \$formType === 'checkbox') {
                        \$value = (\$value === '1' || \$value === 1 || \$value === true || \$value === 'true') ? 1 : 0;
                    } else if (\$formType === 'json_textarea' && !empty(\$value)) {
                        // Validate JSON
                        if (is_string(\$value)) {
                            \$decodedJson = json_decode(\$value);
                            if (json_last_error() !== JSON_ERROR_NONE) {
                                throw new ValidationException('Invalid JSON format for ' . \$field . '.');
                            }
                        } else if (is_array(\$value)) {
                            \$value = json_encode(\$value);
                        }
                    } else if (\$formType === 'password' && !empty(\$value)) {
                        // Hash passwords
                        \$value = password_hash(\$value, PASSWORD_DEFAULT);
                    }
                    
                    // Add to query parameters
                    \$columns[] = \"`{\$field}`\";
                    \$placeholders[] = \"?\";
                    \$values[] = \$value;
                    \$types .= \$this->getBindTypeForColumn(\$field);
                }
                
                // Add timestamps
                \$columns[] = \"`created_at`\";
                \$placeholders[] = \"CURRENT_TIMESTAMP\";
                
                if (in_array('updated_at', \$this->columns)) {
                    \$columns[] = \"`updated_at`\";
                    \$placeholders[] = \"CURRENT_TIMESTAMP\";
                }
                
                // Add user tracking if applicable
                \$userId = api_get_user_id();
                if (in_array('created_by', \$this->columns) && \$userId) {
                    \$columns[] = \"`created_by`\";
                    \$placeholders[] = \"?\";
                    \$values[] = \$userId;
                    \$types .= \"i\";
                }
                
                if (in_array('updated_by', \$this->columns) && \$userId) {
                    \$columns[] = \"`updated_by`\";
                    \$placeholders[] = \"?\";
                    \$values[] = \$userId;
                    \$types .= \"i\";
                }
                
                // Build and execute the query
                \$sql = \"INSERT INTO `{$this->tableName}` (\" . implode(\", \", \$columns) . \") VALUES (\" . implode(\", \", \$placeholders) . \")\";
                \$stmt = \$conn->prepare(\$sql);
                
                if (!\$stmt) {
                    throw new DatabaseException('Database prepare error: ' . \$conn->error);
                }
                
                if (\$values && \$types) {
                    \$stmt->bind_param(\$types, ...\$values);
                }
                
                if (!\$stmt->execute()) {
                    throw new DatabaseException('Database execute error: ' . \$stmt->error);
                }
                
                \$newId = \$conn->insert_id;
                \$stmt->close();
                
                // Fetch the newly created record to return it
                \$sql = \"SELECT * FROM `{$this->tableName}` WHERE `{$this->primaryKey}` = ?\";
                \$stmt = \$conn->prepare(\$sql);
                \$stmt->bind_param('i', \$newId);
                \$stmt->execute();
                \$result = \$stmt->get_result();
                \$data = \$result->fetch_assoc();
                \$stmt->close();
                
                // Commit the transaction
                \$conn->commit();
                
                // Process record for API response
                \$data = \$this->processRecordForApi(\$data);
                
                http_response_code(201); // Created
                \$response = [
                    'success' => true,
                    'message' => '{$tableLabel} created successfully.',
                    'data' => \$data,
                    'links' => [
                        'self' => api_url('{$this->tableName}/' . \$newId)
                    ]
                ];
            } catch (Exception \$e) {
                // Roll back the transaction
                \$conn->rollback();
                throw \$e;
            }
            break;
";
    }

    /**
     * Generate the PUT endpoint for API (update)
     * 
     * @return string PHP code for PUT endpoint
     */
    private function generatePutEndpoint(): string {
        return "
        case 'PUT':
            // Check if ID is provided
            if (!\$id) {
                throw new ValidationException('ID is required for updates.');
            }
            
            // Check permissions
            if (!api_check_permission('update_{$this->tableName}')) {
                throw new AuthorizationException('Permission denied to update {$this->tableName}.');
            }
            
            // Parse input data
            \$input = json_decode(file_get_contents('php://input'), true);
            if (!\$input) {
                throw new ValidationException('Invalid JSON payload.');
            }
            
            // Check if record exists
            \$checkSql = \"SELECT `{$this->primaryKey}` FROM `{$this->tableName}` WHERE `{$this->primaryKey}` = ?\";
            \$checkStmt = \$conn->prepare(\$checkSql);
            \$checkStmt->bind_param('i', \$id);
            \$checkStmt->execute();
            \$checkResult = \$checkStmt->get_result();
            
            if (\$checkResult->num_rows === 0) {
                throw new NotFoundException('{$tableLabel} not found with ID: ' . \$id);
            }
            
            \$checkStmt->close();
            
            // Begin transaction
            \$conn->begin_transaction();
            
            try {
                // Build the UPDATE statement
                \$updateFields = [];
                \$values = [];
                \$types = '';
                
                // Process input fields
                foreach (\$input as \$field => \$value) {
                    // Skip primary key and readonly fields
                    if (\$field === '{$this->primaryKey}' || 
                        in_array(\$field, ['created_at', 'updated_at', 'created_by', 'updated_by'])) {
                        continue;
                    }
                    
                    // Skip if not a valid column
                    if (!in_array(\$field, \$this->columns)) {
                        continue;
                    }
                    
                    // Process based on field type
                    \$formType = \$this->getColumnFormType(\$field);
                    
                    // Convert values based on field type
                    if (\$formType === 'boolean_select' || \$formType === 'checkbox') {
                        \$value = (\$value === '1' || \$value === 1 || \$value === true || \$value === 'true') ? 1 : 0;
                    } else if (\$formType === 'json_textarea' && !empty(\$value)) {
                        // Validate JSON
                        if (is_string(\$value)) {
                            \$decodedJson = json_decode(\$value);
                            if (json_last_error() !== JSON_ERROR_NONE) {
                                throw new ValidationException('Invalid JSON format for ' . \$field . '.');
                            }
                        } else if (is_array(\$value)) {
                            \$value = json_encode(\$value);
                        }
                    } else if (\$formType === 'password') {
                        // Only update password if provided
                        if (empty(\$value)) {
                            continue;
                        }
                        // Hash the new password
                        \$value = password_hash(\$value, PASSWORD_DEFAULT);
                    }
                    
                    // Add to query parameters
                    \$updateFields[] = \"`{\$field}` = ?\";
                    \$values[] = \$value;
                    \$types .= \$this->getBindTypeForColumn(\$field);
                }
                
                // If no fields to update, return success
                if (empty(\$updateFields)) {
                    \$conn->commit();
                    http_response_code(200);
                    \$response = [
                        'success' => true,
                        'message' => 'No changes to update.',
                        'links' => [
                            'self' => api_url('{$this->tableName}/' . \$id)
                        ]
                    ];
                    break;
                }
                
                // Add updated_at timestamp
                if (in_array('updated_at', \$this->columns)) {
                    \$updateFields[] = \"`updated_at` = CURRENT_TIMESTAMP\";
                }
                
                // Add updated_by if applicable
                \$userId = api_get_user_id();
                if (in_array('updated_by', \$this->columns) && \$userId) {
                    \$updateFields[] = \"`updated_by` = ?\";
                    \$values[] = \$userId;
                    \$types .= \"i\";
                }
                
                // Build and execute the query
                \$sql = \"UPDATE `{$this->tableName}` SET \" . implode(\", \", \$updateFields) . \" WHERE `{$this->primaryKey}` = ?\";
                \$values[] = \$id;
                \$types .= \"i\";
                
                \$stmt = \$conn->prepare(\$sql);
                
                if (!\$stmt) {
                    throw new DatabaseException('Database prepare error: ' . \$conn->error);
                }
                
                \$stmt->bind_param(\$types, ...\$values);
                
                if (!\$stmt->execute()) {
                    throw new DatabaseException('Database execute error: ' . \$stmt->error);
                }
                
                \$stmt->close();
                
                // Fetch the updated record to return it
                \$sql = \"SELECT * FROM `{$this->tableName}` WHERE `{$this->primaryKey}` = ?\";
                \$stmt = \$conn->prepare(\$sql);
                \$stmt->bind_param('i', \$id);
                \$stmt->execute();
                \$result = \$stmt->get_result();
                \$data = \$result->fetch_assoc();
                \$stmt->close();
                
                // Commit the transaction
                \$conn->commit();
                
                // Process record for API response
                \$data = \$this->processRecordForApi(\$data);
                
                http_response_code(200);
                \$response = [
                    'success' => true,
                    'message' => '{$tableLabel} updated successfully.',
                    'data' => \$data,
                    'links' => [
                        'self' => api_url('{$this->tableName}/' . \$id)
                    ]
                ];
            } catch (Exception \$e) {
                // Roll back the transaction
                \$conn->rollback();
                throw \$e;
            }
            break;
";
    }

    /**
     * Generate the DELETE endpoint for API
     * 
     * @return string PHP code for DELETE endpoint
     */
    private function generateDeleteEndpoint(): string {
        return "
        case 'DELETE':
            // Check if ID is provided
            if (!\$id) {
                throw new ValidationException('ID is required for deletion.');
            }
            
            // Check permissions
            if (!api_check_permission('delete_{$this->tableName}')) {
                throw new AuthorizationException('Permission denied to delete {$this->tableName}.');
            }
            
            // Check if record exists
            \$checkSql = \"SELECT `{$this->primaryKey}` FROM `{$this->tableName}` WHERE `{$this->primaryKey}` = ?\";
            \$checkStmt = \$conn->prepare(\$checkSql);
            \$checkStmt->bind_param('i', \$id);
            \$checkStmt->execute();
            \$checkResult = \$checkStmt->get_result();
            
            if (\$checkResult->num_rows === 0) {
                throw new NotFoundException('{$tableLabel} not found with ID: ' . \$id);
            }
            
            \$checkStmt->close();
            
            // Begin transaction
            \$conn->begin_transaction();
            
            try {
                // Check for and delete related files if any
                \$fileColumns = [];
                " . $this->getFileColumnsCode() . "
                
                if (!empty(\$fileColumns)) {
                    \$fileSql = \"SELECT \" . implode(', ', array_map(function(\$col) { 
                        return \"`{\$col}`\"; 
                    }, \$fileColumns)) . \" FROM `{$this->tableName}` WHERE `{$this->primaryKey}` = ?\";
                    
                    \$fileStmt = \$conn->prepare(\$fileSql);
                    \$fileStmt->bind_param('i', \$id);
                    \$fileStmt->execute();
                    \$fileResult = \$fileStmt->get_result();
                    
                    if (\$fileRow = \$fileResult->fetch_assoc()) {
                        foreach (\$fileColumns as \$fileCol) {
                            if (!empty(\$fileRow[\$fileCol]) && file_exists(__DIR__ . '/../' . \$fileRow[\$fileCol])) {
                                @unlink(__DIR__ . '/../' . \$fileRow[\$fileCol]);
                            }
                        }
                    }
                    
                    \$fileStmt->close();
                }
                
                // Delete the record
                \$sql = \"DELETE FROM `{$this->tableName}` WHERE `{$this->primaryKey}` = ?\";
                \$stmt = \$conn->prepare(\$sql);
                
                if (!\$stmt) {
                    throw new DatabaseException('Database prepare error: ' . \$conn->error);
                }
                
                \$stmt->bind_param('i', \$id);
                
                if (!\$stmt->execute()) {
                    // Check for foreign key constraint violation
                    if (\$stmt->errno == 1451) {
                        throw new ValidationException('Cannot delete this record because it is referenced by other records.');
                    } else {
                        throw new DatabaseException('Database execute error: ' . \$stmt->error);
                    }
                }
                
                \$affectedRows = \$stmt->affected_rows;
                \$stmt->close();
                
                // Commit the transaction
                \$conn->commit();
                
                http_response_code(200);
                \$response = [
                    'success' => true,
                    'message' => '{$tableLabel} deleted successfully.'
                ];
            } catch (Exception \$e) {
                // Roll back the transaction
                \$conn->rollback();
                throw \$e;
            }
            break;
";
    }

    /**
     * Get code to identify which file columns exist in the table
     * 
     * @return string PHP code for file columns check
     */
    private function getFileColumnsCode(): string {
        $fileColumns = [];
        
        foreach ($this->columns as $column) {
            $formType = $this->getColumnFormType($column);
            
            if ($formType === 'file' || $formType === 'image') {
                $fileColumns[] = $column;
            }
        }
        
        if (empty($fileColumns)) {
            return "// No file columns found in this table";
        }
        
        return "// File columns in this table\n                \$fileColumns = ['" . implode("', '", $fileColumns) . "'];";
    }

    /**
     * Generate method to process record for API
     * 
     * @return string PHP method for record processing
     */
    private function generateProcessRecordForApi(): string {
        return "
    /**
     * Process record for API response
     * 
     * @param array \$record Record data
     * @return array Processed record
     */
    private function processRecordForApi(array \$record): array {
        // Process each field based on its type
        foreach (\$record as \$field => \$value) {
            // Skip null values
            if (\$value === null) {
                continue;
            }
            
            // Get column info (checking if it's a foreign key display field)
            \$columnName = \$field;
            foreach (\$this->foreignKeys as \$fkCol => \$fkDetails) {
                if (\$field === \$fkDetails['field']) {
                    \$columnName = \$fkCol;
                    break;
                }
            }
            
            // Skip if not a valid column
            if (!\$columnName || (!in_array(\$columnName, \$this->columns) && !in_array(\$field, [\$this->primaryKey]))) {
                continue;
            }
            
            // Process based on field type
            \$formType = \$this->getColumnFormType(\$columnName);
            
            if (\$formType === 'password') {
                // Never return password values
                \$record[\$field] = null;
            } else if (\$formType === 'file' || \$formType === 'image') {
                // Add full URL for files
                if (!empty(\$value)) {
                    \$record[\$field . '_url'] = api_get_base_url() . '/' . \$value;
                }
            } else if (\$formType === 'boolean_select' || \$formType === 'checkbox') {
                // Ensure booleans are returned as actual booleans
                \$record[\$field] = (bool)\$value;
            } else if (\$formType === 'json_textarea') {
                // Ensure JSON is returned as parsed object
                if (is_string(\$value)) {
                    \$decoded = json_decode(\$value, true);
                    if (json_last_error() === JSON_ERROR_NONE) {
                        \$record[\$field] = \$decoded;
                    }
                }
            }
            
            // Format dates as ISO 8601 for API consistency
            if (\$field === 'created_at' || \$field === 'updated_at' || 
                \$formType === 'date' || \$formType === 'datetime-local') {
                if (!empty(\$value)) {
                    \$date = new DateTime(\$value);
                    \$record[\$field] = \$date->format('c'); // ISO 8601
                }
            }
        }
        
        return \$record;
    }
";
    }
}
?>