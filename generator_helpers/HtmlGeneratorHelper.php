<?php
// generator_helpers/HtmlGeneratorHelper.php - Enhanced Version

/**
 * HTML Generator Helper Trait
 * 
 * Provides methods for generating responsive HTML5 interfaces
 * using Tabler UI components with accessibility enhancements.
 */
trait HtmlGeneratorHelper {
    /**
     * Generate the main PHP file for managing the CRUD interface
     * 
     * @return string Path to the generated file
     */
    private function generateManagePHPFile(): string {
        $phpPagePath = $this->projectBaseDir . "/pages/manage_{$this->tableName}.php";
        $csrfTokenField = "<?php echo generate_csrf_token_field('manage_" . $this->tableName . "'); ?>";

        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));

        $content = "<?php\n";
        $content .= "// manage_{$this->tableName}.php - Generated by AdvancedCRUDGenerator\n";
        $content .= "\$pageTitle = \"Manage {$tableLabel}\";\n";
        $content .= "if (!check_permission('read_manage_{$this->tableName}')) {\n";
        $content .= "    set_flash_message('danger', 'You do not have permission to view this page.');\n";
        $content .= "    include_once(\$this->projectBaseDir . '/includes/access_denied.php');\n";
        $content .= "    return; // Stop further rendering\n";
        $content .= "}\n";
        $content .= "?>\n\n";

        // Top toolbar with filters, search and actions
        $content .= $this->generateTopToolbar();
        
        // Form Card (Initially hidden)
        $content .= $this->generateFormCard($csrfTokenField);

        // Data table card
        $content .= $this->generateDataTable();

        // Import Modal
        $content .= $this->generateImportModal($csrfTokenField);
        
        // Batch actions modal
        if ($this->config['enableBatchOperations']) {
            $content .= $this->generateBatchActionsModal($csrfTokenField);
        }

        // Include necessary modals
        $content .= "<?php include_once(\$this->projectBaseDir . '/includes/modals/confirm_delete_modal.php'); ?>\n";
        
        try {
            file_put_contents($phpPagePath, $content);
            echo "Generated PHP Manage File: $phpPagePath\n";
        } catch (Exception $e) {
            throw new Exception("Error writing PHP Manage File for {$this->tableName}: " . $e->getMessage());
        }
        return $phpPagePath;
    }

    /**
     * Generate the top toolbar with filters, search and actions
     * 
     * @return string HTML for the top toolbar
     */
    private function generateTopToolbar(): string {
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));
        
        $content = "<div class='card mb-3'>\n";
        $content .= "  <div class='card-header flex-wrap align-items-center'>\n";
        $content .= "    <div class='d-flex flex-column flex-md-row align-items-md-center justify-content-between w-100'>\n";
        $content .= "      <h3 class='card-title me-auto mb-2 mb-md-0'>{$tableLabel} Management</h3>\n";
        $content .= "      <div class='d-flex flex-wrap gap-2 align-items-center'>\n";
        $content .= "        <div class='input-icon' style='min-width: 200px;'>\n";
        $content .= "          <input type='text' id='search-box-{$this->tableName}' class='form-control form-control-sm' placeholder='Search...' aria-label='Search {$tableLabel}'>\n";
        $content .= "          <span class='input-icon-addon'>\n";
        $content .= "            <svg xmlns='http://www.w3.org/2000/svg' class='icon' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0' /><path d='M21 21l-6 -6' /></svg>\n";
        $content .= "          </span>\n";
        $content .= "        </div>\n";

        // Export dropdown
        if (!empty($this->config['enableExports'])) {
            $content .= "        <div class='btn-group'>\n";
            $content .= "          <button type='button' class='btn btn-outline-secondary btn-sm dropdown-toggle' data-bs-toggle='dropdown' aria-expanded='false'>\n";
            $content .= "            <svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-download me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2' /><path d='M7 11l5 5l5 -5' /><path d='M12 4l0 12' /></svg>Export\n";
            $content .= "          </button>\n";
            $content .= "          <ul class='dropdown-menu dropdown-menu-end'>\n";
            
            if (in_array('csv', $this->config['enableExports'])) {
                $content .= "            <li><a class='dropdown-item export-{$this->tableName}' data-format='csv' href='#'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-file-type-csv me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M14 3v4a1 1 0 0 0 1 1h4' /><path d='M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4' /><path d='M7 16.5a1.5 1.5 0 0 0 0 3a1.5 1.5 0 0 0 0 -3z' /><path d='M10 15v4.5' /><path d='M13 15v4.5' /><path d='M16 19h2.5a1.5 1.5 0 0 0 0 -3h-2.5v4.5' /></svg>CSV</a></li>\n";
            }
            
            if (in_array('excel', $this->config['enableExports'])) {
                $content .= "            <li><a class='dropdown-item export-{$this->tableName}' data-format='excel' href='#'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-file-spreadsheet me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M14 3v4a1 1 0 0 0 1 1h4' /><path d='M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z' /><path d='M8 11h8v7h-8z' /><path d='M8 15h8' /><path d='M11 11v7' /></svg>Excel (XLSX)</a></li>\n";
            }
            
            if (in_array('pdf', $this->config['enableExports'])) {
                $content .= "            <li><a class='dropdown-item export-{$this->tableName}' data-format='pdf' href='#'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-file-type-pdf me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M14 3v4a1 1 0 0 0 1 1h4' /><path d='M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4' /><path d='M5 18h1.5a1.5 1.5 0 0 0 0 -3h-1.5v6' /><path d='M17 18h2' /><path d='M20 15h-3v6' /><path d='M11 15v6h1a2 2 0 0 0 2 -2v-2a2 2 0 0 0 -2 -2h-1z' /></svg>PDF</a></li>\n";
            }
            
            $content .= "          </ul>\n";
            $content .= "        </div>\n";
        }

        // Import button
        $content .= "        <?php if (check_permission('import_manage_{$this->tableName}')): ?>\n";
        $content .= "        <button id='import-{$this->tableName}-btn' class='btn btn-outline-info btn-sm' data-bs-toggle='modal' data-bs-target='#import-{$this->tableName}-modal'>\n";
        $content .= "          <svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-upload me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2' /><path d='M7 9l5 -5l5 5' /><path d='M12 4l0 12' /></svg>Import\n";
        $content .= "        </button>\n";
        $content .= "        <?php endif; ?>\n";

        // Batch actions button (if enabled)
        if ($this->config['enableBatchOperations']) {
            $content .= "        <div class='d-none' id='batch-actions-{$this->tableName}'>\n";
            $content .= "          <button id='batch-actions-btn-{$this->tableName}' class='btn btn-outline-warning btn-sm dropdown-toggle' data-bs-toggle='dropdown' aria-expanded='false'>\n";
            $content .= "            <svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-checklist me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M9.615 20h-2.615a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8' /><path d='M14 19l2 2l4 -4' /><path d='M9 8h4' /><path d='M9 12h2' /></svg>Batch Actions (<span id='selected-count-{$this->tableName}'>0</span>)\n";
            $content .= "          </button>\n";
            $content .= "          <ul class='dropdown-menu dropdown-menu-end'>\n";
            $content .= "            <?php if (check_permission('delete_manage_{$this->tableName}')): ?>\n";
            $content .= "            <li><a class='dropdown-item text-danger batch-delete-{$this->tableName}' href='#'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-trash me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M4 7l16 0' /><path d='M10 11l0 6' /><path d='M14 11l0 6' /><path d='M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12' /><path d='M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3' /></svg>Delete Selected</a></li>\n";
            $content .= "            <?php endif; ?>\n";
            $content .= "            <?php if (check_permission('update_manage_{$this->tableName}')): ?>\n";
            $content .= "            <li><a class='dropdown-item batch-edit-{$this->tableName}' href='#' data-bs-toggle='modal' data-bs-target='#batch-edit-{$this->tableName}-modal'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-edit me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1' /><path d='M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z' /><path d='M16 5l3 3' /></svg>Edit Selected</a></li>\n";
            $content .= "            <?php endif; ?>\n";
            $content .= "          </ul>\n";
            $content .= "        </div>\n";
        }

        // Add new button
        $content .= "        <?php if (check_permission('create_manage_{$this->tableName}')): ?>\n";
        $content .= "        <button id='add-{$this->tableName}-btn' class='btn btn-primary btn-sm'>\n";
        $content .= "          <svg xmlns='http://www.w3.org/2000/svg' class='icon me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M12 5l0 14' /><path d='M5 12l14 0' /></svg>Add {$tableLabel}\n";
        $content .= "        </button>\n";
        $content .= "        <?php endif; ?>\n";
        $content .= "      </div>\n";
        $content .= "    </div>\n";
        $content .= "  </div>\n";
        $content .= "</div>\n\n";

        return $content;
    }

    /**
     * Generate the form card for adding/editing records
     * 
     * @param string $csrfTokenField CSRF token field HTML
     * @return string HTML for the form card
     */
    private function generateFormCard(string $csrfTokenField): string {
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));

        $content = "<div id='{$this->tableName}-form-card' class='card mb-4 d-none' aria-labelledby='form-title-{$this->tableName}'>\n";
        $content .= "    <div class='card-header'>\n";
        $content .= "        <h3 id='form-title-{$this->tableName}' class='card-title'>Add {$tableLabel}</h3>\n";
        $content .= "    </div>\n";
        $content .= "    <div class='card-body'>\n";
        $content .= "        <form id='{$this->tableName}-form-element' enctype='multipart/form-data' novalidate>\n";
        $content .= "            {$csrfTokenField}\n";
        $content .= "            <input type='hidden' id='{$this->primaryKey}' name='{$this->primaryKey}'>\n";
        $content .= "            <div class='row'>\n";

        // Generate form fields
        foreach ($this->columns as $column) {
            // Skip primary key and certain system fields
            if ($column === $this->primaryKey && 
                ($this->getColumnFormType($column) === 'hidden' || 
                 $this->getColumnFormType($column) === 'hidden_pk')) {
                continue;
            }

            // Skip system audit fields
            if (in_array($column, ['created_at', 'updated_at', 'created_by', 'updated_by'])) {
                continue;
            }

            $def = $this->getColumnDef($column);
            $columnLabel = $this->getColumnLabel($column);
            $formType = $this->getColumnFormType($column);
            $isNullable = $this->isColumnNullable($column);
            $requiredAttr = !$isNullable ? 'required' : '';
            $requiredSpan = !$isNullable ? " <span class='text-danger'>*</span>" : "";
            $defaultValue = $this->getColumnDefaultValue($column);
            $options = $this->getColumnOptions($column);
            $validationRules = $this->getValidationRules($column);
            $validationAttrs = '';

            // Add data-validation attributes for client-side validation
            foreach ($validationRules as $rule) {
                if ($rule === 'required') {
                    continue; // Already handled by required attribute
                } else if (strpos($rule, 'min:') === 0) {
                    $min = substr($rule, 4);
                    $validationAttrs .= " data-min-length='{$min}'";
                } else if (strpos($rule, 'max:') === 0) {
                    $max = substr($rule, 4);
                    $validationAttrs .= " data-max-length='{$max}'";
                } else if ($rule === 'email') {
                    $validationAttrs .= " data-validation-type='email'";
                } else if (strpos($rule, 'mimes:') === 0) {
                    $mimes = substr($rule, 6);
                    $validationAttrs .= " data-allowed-mimes='{$mimes}'";
                } else if (strpos($rule, 'max_size:') === 0) {
                    $maxSize = substr($rule, 9);
                    $validationAttrs .= " data-max-size='{$maxSize}'";
                }
            }

            // Determine column width based on field type
            $colWidth = 'col-md-6';
            if (in_array($formType, ['textarea', 'json_textarea', 'wysiwyg', 'file', 'multi_select'])) {
                $colWidth = 'col-md-12';
            }

            $content .= "                <div class='{$colWidth} mb-3'>\n";
            $content .= "                    <label for='{$column}' class='form-label'>{$columnLabel}{$requiredSpan}</label>\n";

            // Generate field based on type
            switch ($formType) {
                case 'select':
                    $content .= "                    <select id='{$column}' name='{$column}' class='form-select select2-basic-dynamic' data-placeholder='Select {$columnLabel}' {$requiredAttr} {$validationAttrs} style='width: 100%;'>\n";
                    $content .= "                        <option value=''></option>\n";
                    
                    // If we have predefined options (for non-FK fields)
                    if (!empty($options) && !isset($this->foreignKeys[$column])) {
                        foreach ($options as $value => $label) {
                            $selected = $value === $defaultValue ? 'selected' : '';
                            $content .= "                        <option value='{$value}' {$selected}>{$label}</option>\n";
                        }
                    }
                    
                    $content .= "                    </select>\n";
                    break;
                
                case 'multi_select':
                    $content .= "                    <select id='{$column}' name='{$column}[]' class='form-select select2-multiple' multiple data-placeholder='Select {$columnLabel}' {$requiredAttr} {$validationAttrs} style='width: 100%;'>\n";
                    
                    // If we have predefined options
                    if (!empty($options)) {
                        foreach ($options as $value => $label) {
                            $selected = is_array($defaultValue) && in_array($value, $defaultValue) ? 'selected' : '';
                            $content .= "                        <option value='{$value}' {$selected}>{$label}</option>\n";
                        }
                    }
                    
                    $content .= "                    </select>\n";
                    break;
                
                case 'date':
                    $content .= "                    <input type='date' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                case 'datetime-local':
                    $content .= "                    <input type='datetime-local' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                case 'time':
                    $content .= "                    <input type='time' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                case 'file':
                    $content .= "                    <div class='custom-file-upload'>\n";
                    $content .= "                        <input type='file' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs}>\n";
                    $content .= "                        <input type='hidden' name='existing_{$column}' id='existing_{$column}'>\n";
                    $content .= "                        <div id='{$column}_preview' class='mt-2'></div>\n";
                    $content .= "                    </div>\n";
                    break;
                
                case 'image':
                    $content .= "                    <div class='custom-file-upload'>\n";
                    $content .= "                        <input type='file' id='{$column}' name='{$column}' class='form-control image-upload' accept='image/*' {$requiredAttr} {$validationAttrs}>\n";
                    $content .= "                        <input type='hidden' name='existing_{$column}' id='existing_{$column}'>\n";
                    $content .= "                        <div id='{$column}_preview' class='mt-2'></div>\n";
                    $content .= "                    </div>\n";
                    break;
                
                case 'textarea':
                    $content .= "                    <textarea id='{$column}' name='{$column}' class='form-control' rows='3' {$requiredAttr} {$validationAttrs}>" . htmlspecialchars((string)$defaultValue) . "</textarea>\n";
                    break;
                
                case 'wysiwyg':
                    $content .= "                    <textarea id='{$column}' name='{$column}' class='form-control tinymce' rows='5' {$requiredAttr} {$validationAttrs}>" . htmlspecialchars((string)$defaultValue) . "</textarea>\n";
                    break;
                
                case 'boolean_select':
                    $selected_0 = ($defaultValue === '0' || $defaultValue === 0 || $defaultValue === false) ? 'selected' : '';
                    $selected_1 = ($defaultValue === '1' || $defaultValue === 1 || $defaultValue === true) ? 'selected' : '';
                    $content .= "                    <select id='{$column}' name='{$column}' class='form-select' {$requiredAttr} {$validationAttrs}>\n";
                    $content .= "                        <option value='1' {$selected_1}>Yes</option>\n";
                    $content .= "                        <option value='0' {$selected_0}>No</option>\n";
                    $content .= "                    </select>\n";
                    break;
                
                case 'radio':
                    if (!empty($options)) {
                        $content .= "                    <div class='form-selectgroup'>\n";
                        foreach ($options as $value => $label) {
                            $checked = $value === $defaultValue ? 'checked' : '';
                            $content .= "                        <label class='form-selectgroup-item'>\n";
                            $content .= "                            <input type='radio' name='{$column}' value='{$value}' {$checked} class='form-selectgroup-input' {$requiredAttr}>\n";
                            $content .= "                            <span class='form-selectgroup-label'>{$label}</span>\n";
                            $content .= "                        </label>\n";
                        }
                        $content .= "                    </div>\n";
                    }
                    break;
                
                case 'checkbox':
                    $checked = ($defaultValue === '1' || $defaultValue === 1 || $defaultValue === true) ? 'checked' : '';
                    $content .= "                    <label class='form-check'>\n";
                    $content .= "                        <input type='checkbox' name='{$column}' value='1' {$checked} class='form-check-input' {$requiredAttr} {$validationAttrs}>\n";
                    $content .= "                        <span class='form-check-label'>{$columnLabel}</span>\n";
                    $content .= "                    </label>\n";
                    break;
                
                case 'number':
                    $step = isset($def['step']) ? "step='{$def['step']}'" : (strpos(strtoupper($def['type'] ?? ''), 'INT') !== false ? "step='1'" : "step='any'");
                    $min = isset($def['min']) ? "min='{$def['min']}'" : "";
                    $max = isset($def['max']) ? "max='{$def['max']}'" : "";
                    $content .= "                    <input type='number' {$step} {$min} {$max} id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                case 'color':
                    $content .= "                    <input type='color' id='{$column}' name='{$column}' class='form-control form-control-color' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)($defaultValue ?: '#ffffff')) . "'>\n";
                    break;
                
                case 'email':
                    $content .= "                    <input type='email' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                case 'url':
                    $content .= "                    <input type='url' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "' placeholder='https://'>\n";
                    break;
                
                case 'tel':
                    $content .= "                    <input type='tel' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                case 'password':
                    $autocomplete = $column === 'password' ? 'new-password' : 'off';
                    $content .= "                    <div class='input-group input-group-flat'>\n";
                    $content .= "                        <input type='password' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} autocomplete='{$autocomplete}'>\n";
                    $content .= "                        <span class='input-group-text'>\n";
                    $content .= "                            <a href='#' class='link-secondary toggle-password' title='Toggle password visibility' data-bs-toggle='tooltip' data-target='#{$column}'>\n";
                    $content .= "                                <svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-eye' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'></path><path d='M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0'></path><path d='M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6'></path></svg>\n";
                    $content .= "                            </a>\n";
                    $content .= "                        </span>\n";
                    $content .= "                    </div>\n";
                    break;
                
                case 'json_textarea':
                    $content .= "                    <textarea id='{$column}' name='{$column}' class='form-control json-editor' rows='5' placeholder='Enter valid JSON' {$requiredAttr} {$validationAttrs}>" . htmlspecialchars((string)$defaultValue) . "</textarea>\n";
                    $content .= "                    <small class='form-hint'>Enter valid JSON. For empty, provide {} or [].</small>\n";
                    break;
                
                case 'hidden':
                case 'hidden_pk':
                    $content .= "                    <input type='hidden' id='{$column}' name='{$column}' value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
                
                default: // 'text'
                    $content .= "                    <input type='text' id='{$column}' name='{$column}' class='form-control' {$requiredAttr} {$validationAttrs} value='" . htmlspecialchars((string)$defaultValue) . "'>\n";
                    break;
            }
            
            // Add help text if available
            if (isset($def['help_text'])) {
                $content .= "                    <small class='form-hint'>" . htmlspecialchars($def['help_text']) . "</small>\n";
            }
            
            $content .= "                </div>\n";
        }
        
        $content .= "            </div>\n"; // End .row
        $content .= "            <div class='mt-4 d-flex justify-content-end'>\n";
        $content .= "                <button type='button' id='cancel-{$this->tableName}-form' class='btn btn-ghost-secondary me-2'>Cancel</button>\n";
        $content .= "                <button type='submit' class='btn btn-primary'>Save {$tableLabel}</button>\n";
        $content .= "            </div>\n";
        $content .= "        </form>\n";
        $content .= "    </div>\n";
        $content .= "</div>\n\n";

        return $content;
    }

    /**
     * Generate the data table
     * 
     * @return string HTML for the data table
     */
    private function generateDataTable(): string {
        $content = "<div class='card'>\n";
        $content .= "  <div id='{$this->tableName}-list-container' class='table-responsive'>\n";
        $content .= "    <div id='{$this->tableName}-list-loading' class='text-center p-4'>\n";
        $content .= "      <div class='spinner-border text-primary' role='status'></div>\n";
        $content .= "      <p class='mt-2 text-muted'>Loading data...</p>\n";
        $content .= "    </div>\n";
        $content .= "    <div id='{$this->tableName}-list-empty' class='text-center p-4 text-muted d-none'>\n";
        $content .= "      <p>No records found. Try adjusting your search or add new records.</p>\n";
        $content .= "    </div>\n";
        $content .= "    <table id='table-{$this->tableName}' class='table card-table table-vcenter text-nowrap table-hover table-striped d-none'>\n";
        
        // If batch operations are enabled, add checkbox column in the thead
        if ($this->config['enableBatchOperations']) {
            $content .= "      <thead>\n";
            $content .= "        <tr>\n";
            $content .= "          <th width='40'>\n";
            $content .= "            <div class='form-check'>\n";
            $content .= "              <input type='checkbox' class='form-check-input check-all' id='check-all-{$this->tableName}'>\n";
            $content .= "            </div>\n";
            $content .= "          </th>\n";
            $content .= "          <!-- Table headers will be generated by JavaScript -->\n";
            $content .= "        </tr>\n";
            $content .= "      </thead>\n";
        }
        
        $content .= "    </table>\n";
        $content .= "  </div>\n";
        $content .= "  <div class='card-footer d-flex align-items-center flex-wrap' id='pagination-{$this->tableName}-container'>\n";
        $content .= "    <p class='m-0 text-muted me-auto mb-2 mb-sm-0' id='pagination-info-{$this->tableName}'>Showing <span>0</span> to <span>0</span> of <span>0</span> entries</p>\n";
        $content .= "    <ul class='pagination m-0 ms-auto' id='pagination-links-{$this->tableName}'></ul>\n";
        $content .= "  </div>\n";
        $content .= "</div>\n\n";

        return $content;
    }

    /**
     * Generate the import modal
     * 
     * @param string $csrfTokenField CSRF token field HTML
     * @return string HTML for the import modal
     */
    private function generateImportModal(string $csrfTokenField): string {
        $content = "<?php if (check_permission('import_manage_{$this->tableName}')): ?>\n";
        $content .= "<div class='modal modal-blur fade' id='import-{$this->tableName}-modal' tabindex='-1' aria-labelledby='import-{$this->tableName}-title' aria-hidden='true'>\n";
        $content .= "  <div class='modal-dialog modal-lg modal-dialog-centered' role='document'>\n";
        $content .= "    <div class='modal-content'>\n";
        $content .= "      <div class='modal-header'>\n";
        $content .= "        <h5 class='modal-title' id='import-{$this->tableName}-title'>Import " . htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName))) . " from CSV</h5>\n";
        $content .= "        <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>\n";
        $content .= "      </div>\n";
        $content .= "      <form id='import-{$this->tableName}-form' enctype='multipart/form-data'>\n";
        $content .= "        {$csrfTokenField}\n";
        $content .= "        <input type='hidden' name='action' value='import_csv'>\n";
        $content .= "        <div class='modal-body'>\n";
        $content .= "          <div class='alert alert-info' role='alert'>\n";
        $content .= "            <h4 class='alert-title'>Import Instructions</h4>\n";
        $content .= "            <p>Ensure your CSV file has headers matching the table columns: " . implode(', ', array_diff($this->columns, [$this->primaryKey])) . "</p>\n";
        $content .= "            <p>The primary key ('{$this->primaryKey}') should not be in the CSV for new records.</p>\n";
        $content .= "          </div>\n";
        $content .= "          <div class='mb-3'>\n";
        $content .= "            <label class='form-label'>CSV File</label>\n";
        $content .= "            <input type='file' name='import_file' class='form-control' accept='.csv' required>\n";
        $content .= "          </div>\n";
        $content .= "          <div class='mb-3'>\n";
        $content .= "            <label class='form-check form-switch'>\n";
        $content .= "              <input class='form-check-input' type='checkbox' name='has_header' checked>\n";
        $content .= "              <span class='form-check-label'>First row contains headers</span>\n";
        $content .= "            </label>\n";
        $content .= "          </div>\n";
        $content .= "          <div class='mb-3'>\n";
        $content .= "            <label class='form-label'>Update existing records based on:</label>\n";
        $content .= "            <select name='update_key' class='form-select'>\n";
        $content .= "              <option value=''>Don't update (insert only)</option>\n";
        $content .= "              <option value='{$this->primaryKey}'>{$this->primaryKey} (if included in CSV)</option>\n";
        
        // Add unique keys as options for matching
        foreach ($this->uniqueKeys as $uniqueKey) {
            if (is_array($uniqueKey) && count($uniqueKey) === 1) {
                $field = $uniqueKey[0];
                $fieldLabel = $this->getColumnLabel($field);
                $content .= "              <option value='{$field}'>{$fieldLabel}</option>\n";
            }
        }
        
        $content .= "            </select>\n";
        $content .= "          </div>\n";
        $content .= "          <div id='import-{$this->tableName}-feedback' class='mt-3'></div>\n";
        $content .= "        </div>\n";
        $content .= "        <div class='modal-footer'>\n";
        $content .= "          <a href='#' class='btn btn-link link-secondary' data-bs-dismiss='modal'>Cancel</a>\n";
        $content .= "          <button type='submit' class='btn btn-primary ms-auto'>\n";
        $content .= "            <svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-upload me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2' /><path d='M7 9l5 -5l5 5' /><path d='M12 4l0 12' /></svg>Start Import\n";
        $content .= "          </button>\n";
        $content .= "        </div>\n";
        $content .= "      </form>\n";
        $content .= "    </div>\n";
        $content .= "  </div>\n";
        $content .= "</div>\n";
        $content .= "<?php endif; ?>\n\n";

        return $content;
    }

    /**
     * Generate the batch actions modal
     * 
     * @param string $csrfTokenField CSRF token field HTML
     * @return string HTML for the batch edit modal
     */
    private function generateBatchActionsModal(string $csrfTokenField): string {
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));
        
        $content = "<?php if (check_permission('update_manage_{$this->tableName}')): ?>\n";
        $content .= "<div class='modal modal-blur fade' id='batch-edit-{$this->tableName}-modal' tabindex='-1' aria-labelledby='batch-edit-{$this->tableName}-title' aria-hidden='true'>\n";
        $content .= "  <div class='modal-dialog modal-lg modal-dialog-centered' role='document'>\n";
        $content .= "    <div class='modal-content'>\n";
        $content .= "      <div class='modal-header'>\n";
        $content .= "        <h5 class='modal-title' id='batch-edit-{$this->tableName}-title'>Edit Selected {$tableLabel}</h5>\n";
        $content .= "        <button type='button' class='btn-close' data-bs-dismiss='modal' aria-label='Close'></button>\n";
        $content .= "      </div>\n";
        $content .= "      <form id='batch-edit-{$this->tableName}-form'>\n";
        $content .= "        {$csrfTokenField}\n";
        $content .= "        <input type='hidden' name='action' value='batch_update'>\n";
        $content .= "        <input type='hidden' name='ids' id='batch-edit-ids-{$this->tableName}'>\n";
        $content .= "        <div class='modal-body'>\n";
        $content .= "          <div class='alert alert-info' role='alert'>\n";
        $content .= "            <h4 class='alert-title'>Batch Edit <span id='batch-edit-count-{$this->tableName}'>0</span> Records</h4>\n";
        $content .= "            <p>Select the fields you want to update for all selected records. Only checked fields will be updated.</p>\n";
        $content .= "          </div>\n";
        
        // Generate form fields for batch editing
        // Only include simple fields that make sense for batch updates
        $batchEditableColumns = [];
        foreach ($this->columns as $column) {
            // Skip primary key, files, passwords, and rich content fields
            if ($column === $this->primaryKey || 
                in_array($column, ['created_at', 'updated_at', 'created_by', 'updated_by']) || 
                in_array($this->getColumnFormType($column), ['file', 'image', 'password', 'wysiwyg', 'json_textarea'])) {
                continue;
            }
            
            $batchEditableColumns[] = $column;
        }
        
        if (empty($batchEditableColumns)) {
            $content .= "          <div class='alert alert-warning'>No batch-editable fields available.</div>\n";
        } else {
            foreach ($batchEditableColumns as $column) {
                $formType = $this->getColumnFormType($column);
                $columnLabel = $this->getColumnLabel($column);
                $options = $this->getColumnOptions($column);
                
                $content .= "          <div class='mb-3'>\n";
                $content .= "            <label class='form-check mb-2'>\n";
                $content .= "              <input type='checkbox' class='form-check-input batch-field-toggle' data-field='{$column}'>\n";
                $content .= "              <span class='form-check-label'>{$columnLabel}</span>\n";
                $content .= "            </label>\n";
                $content .= "            <div class='batch-field-container' id='batch-field-{$column}-container' style='display: none;'>\n";
                
                // Generate appropriate field based on type
                switch ($formType) {
                    case 'select':
                        $content .= "              <select id='batch_{$column}' name='batch_{$column}' class='form-select select2-basic-dynamic' data-placeholder='Select {$columnLabel}' style='width: 100%;' disabled>\n";
                        $content .= "                <option value=''></option>\n";
                        
                        // If we have predefined options (for non-FK fields)
                        if (!empty($options) && !isset($this->foreignKeys[$column])) {
                            foreach ($options as $value => $label) {
                                $content .= "                <option value='{$value}'>{$label}</option>\n";
                            }
                        }
                        
                        $content .= "              </select>\n";
                        break;
                    
                    case 'boolean_select':
                        $content .= "              <select id='batch_{$column}' name='batch_{$column}' class='form-select' disabled>\n";
                        $content .= "                <option value='1'>Yes</option>\n";
                        $content .= "                <option value='0'>No</option>\n";
                        $content .= "              </select>\n";
                        break;
                    
                    case 'date':
                        $content .= "              <input type='date' id='batch_{$column}' name='batch_{$column}' class='form-control' disabled>\n";
                        break;
                    
                    case 'datetime-local':
                        $content .= "              <input type='datetime-local' id='batch_{$column}' name='batch_{$column}' class='form-control' disabled>\n";
                        break;
                    
                    case 'number':
                        $step = (strpos(strtoupper($this->getColumnDef($column, 'type', '')), 'INT') !== false) ? "step='1'" : "step='any'";
                        $content .= "              <input type='number' {$step} id='batch_{$column}' name='batch_{$column}' class='form-control' disabled>\n";
                        break;
                    
                    default: // text, email, etc.
                        $content .= "              <input type='text' id='batch_{$column}' name='batch_{$column}' class='form-control' disabled>\n";
                        break;
                }
                
                $content .= "            </div>\n";
                $content .= "          </div>\n";
            }
        }
        
        $content .= "          <div id='batch-edit-{$this->tableName}-feedback' class='mt-3'></div>\n";
        $content .= "        </div>\n";
        $content .= "        <div class='modal-footer'>\n";
        $content .= "          <a href='#' class='btn btn-link link-secondary' data-bs-dismiss='modal'>Cancel</a>\n";
        $content .= "          <button type='submit' class='btn btn-primary ms-auto'>\n";
        $content .= "            <svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-edit me-1' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1' /><path d='M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z' /><path d='M16 5l3 3' /></svg>Update Selected Records\n";
        $content .= "          </button>\n";
        $content .= "        </div>\n";
        $content .= "      </form>\n";
        $content .= "    </div>\n";
        $content .= "  </div>\n";
        $content .= "</div>\n";
        $content .= "<?php endif; ?>\n\n";

        return $content;
    }
}
?>