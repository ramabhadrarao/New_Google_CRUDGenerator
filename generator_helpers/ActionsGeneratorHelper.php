<?php
// generator_helpers/ActionsGeneratorHelper.php - Enhanced Version

/**
 * Actions Generator Helper Trait
 * 
 * Provides methods for generating PHP code to handle CRUD operations,
 * file uploads, validations, and batch operations for database tables.
 */
trait ActionsGeneratorHelper {
    /**
     * Generate the PHP actions file for handling CRUD operations
     * 
     * @return string Path to the generated file
     */
    private function generateActionsPHPFile(): string {
        $actionsPath = $this->projectBaseDir . "/actions/actions_{$this->tableName}.php";
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));
        
        $content = "<?php\n";
        $content .= "// actions_{$this->tableName}.php - Generated by AdvancedCRUDGenerator\n";
        $content .= "require_once(__DIR__ . '/../includes/session.php');\n";
        $content .= "require_once(__DIR__ . '/../includes/dbconfig.php');\n\n";
        
        // Helper function to get current user ID
        $content .= "/**\n";
        $content .= " * Get the current logged-in user ID\n";
        $content .= " * @return int|null User ID or null if not logged in\n";
        $content .= " */\n";
        $content .= "function get_current_user_id() {\n";
        $content .= "    return isset(\$_SESSION['user_id']) ? \$_SESSION['user_id'] : null;\n";
        $content .= "}\n\n";
        
        // Helper function to get bind type for column
        $content .= "/**\n";
        $content .= " * Get the correct bind type for a column in prepared statements\n";
        $content .= " * @param string \$column Column name\n";
        $content .= " * @return string 'i', 's', 'd', or 'b' for mysqli_stmt->bind_param\n";
        $content .= " */\n";
        $content .= "function get_bind_type_for_column(\$column) {\n";
        $content .= "    // Define database column types and their corresponding bind types\n";
        $content .= "    \$columnDefinitions = " . var_export(array_map(function($col) {
            return [
                'type' => $this->getColumnDef($col, 'type', 'VARCHAR'),
                'form_type' => $this->getColumnFormType($col),
            ];
        }, array_combine($this->columns, $this->columns)), true) . ";\n";
        $content .= "    \n";
        $content .= "    \$colType = strtoupper(\$columnDefinitions[\$column]['type'] ?? 'VARCHAR');\n";
        $content .= "    \$formType = \$columnDefinitions[\$column]['form_type'] ?? 'text';\n";
        $content .= "    \n";
        $content .= "    if (strpos(\$colType, 'INT') !== false) {\n";
        $content .= "        return 'i'; // Integer\n";
        $content .= "    } else if (strpos(\$colType, 'DECIMAL') !== false || strpos(\$colType, 'FLOAT') !== false\n";
        $content .= "            || strpos(\$colType, 'DOUBLE') !== false || strpos(\$colType, 'REAL') !== false) {\n";
        $content .= "        return 'd'; // Double\n";
        $content .= "    } else if (\$formType === 'boolean_select' || \$formType === 'checkbox') {\n";
        $content .= "        return 'i'; // Boolean as integer\n";
        $content .= "    } else {\n";
        $content .= "        return 's'; // String (default)\n";
        $content .= "    }\n";
        $content .= "}\n\n";
        
        // Function for handling file uploads
        $content .= "/**\n";
        $content .= " * Handle file upload for a field\n";
        $content .= " * @param string \$inputName Name of the file input field\n";
        $content .= " * @param string \$uploadPath Upload directory path\n";
        $content .= " * @param array \$allowedExtensions Array of allowed file extensions\n";
        $content .= " * @param int \$maxSize Maximum file size in KB\n";
        $content .= " * @param string \$existingFile Path to existing file (if updating)\n";
        $content .= " * @return array [success, file_path, error_message]\n";
        $content .= " */\n";
        $content .= "function handle_file_upload(\$inputName, \$uploadPath, \$allowedExtensions = [], \$maxSize = 2048, \$existingFile = '') {\n";
        $content .= "    // Check if a file was uploaded\n";
        $content .= "    if (!isset(\$_FILES[\$inputName]) || \$_FILES[\$inputName]['error'] === UPLOAD_ERR_NO_FILE) {\n";
        $content .= "        // No new file, keep existing if any\n";
        $content .= "        return ['success' => true, 'file_path' => \$existingFile, 'error_message' => ''];\n";
        $content .= "    }\n";
        $content .= "    \n";
        $content .= "    // Validate upload errors\n";
        $content .= "    if (\$_FILES[\$inputName]['error'] !== UPLOAD_ERR_OK) {\n";
        $content .= "        \$errorMessages = [\n";
        $content .= "            UPLOAD_ERR_INI_SIZE => 'The uploaded file exceeds the upload_max_filesize directive in php.ini',\n";
        $content .= "            UPLOAD_ERR_FORM_SIZE => 'The uploaded file exceeds the MAX_FILE_SIZE directive in the HTML form',\n";
        $content .= "            UPLOAD_ERR_PARTIAL => 'The uploaded file was only partially uploaded',\n";
        $content .= "            UPLOAD_ERR_NO_TMP_DIR => 'Missing a temporary folder',\n";
        $content .= "            UPLOAD_ERR_CANT_WRITE => 'Failed to write file to disk',\n";
        $content .= "            UPLOAD_ERR_EXTENSION => 'A PHP extension stopped the file upload'\n";
        $content .= "        ];\n";
        $content .= "        \n";
        $content .= "        return [\n";
        $content .= "            'success' => false,\n";
        $content .= "            'file_path' => \$existingFile,\n";
        $content .= "            'error_message' => \$errorMessages[\$_FILES[\$inputName]['error']] ?? 'Unknown upload error'\n";
        $content .= "        ];\n";
        $content .= "    }\n";
        $content .= "    \n";
        $content .= "    // Get file info\n";
        $content .= "    \$file = \$_FILES[\$inputName];\n";
        $content .= "    \$fileName = basename(\$file['name']);\n";
        $content .= "    \$fileSize = \$file['size'];\n";
        $content .= "    \$fileTmp = \$file['tmp_name'];\n";
        $content .= "    \$fileExt = strtolower(pathinfo(\$fileName, PATHINFO_EXTENSION));\n";
        $content .= "    \n";
        $content .= "    // Validate file size\n";
        $content .= "    if (\$fileSize > \$maxSize * 1024) {\n";
        $content .= "        return [\n";
        $content .= "            'success' => false,\n";
        $content .= "            'file_path' => \$existingFile,\n";
        $content .= "            'error_message' => \"File size exceeds the maximum allowed size of {\$maxSize}KB\"\n";
        $content .= "        ];\n";
        $content .= "    }\n";
        $content .= "    \n";
        $content .= "    // Validate file extension\n";
        $content .= "    if (!empty(\$allowedExtensions) && !in_array(\$fileExt, \$allowedExtensions)) {\n";
        $content .= "        return [\n";
        $content .= "            'success' => false,\n";
        $content .= "            'file_path' => \$existingFile,\n";
        $content .= "            'error_message' => \"File type not allowed. Allowed types: \" . implode(', ', \$allowedExtensions)\n";
        $content .= "        ];\n";
        $content .= "    }\n";
        $content .= "    \n";
        $content .= "    // Create upload directory if it doesn't exist\n";
        $content .= "    if (!is_dir(__DIR__ . '/../' . \$uploadPath)) {\n";
        $content .= "        if (!mkdir(__DIR__ . '/../' . \$uploadPath, 0755, true)) {\n";
        $content .= "            return [\n";
        $content .= "                'success' => false,\n";
        $content .= "                'file_path' => \$existingFile,\n";
        $content .= "                'error_message' => \"Failed to create upload directory\"\n";
        $content .= "            ];\n";
        $content .= "        }\n";
        $content .= "    }\n";
        $content .= "    \n";
        $content .= "    // Generate a unique filename to prevent overwriting\n";
        $content .= "    \$newFileName = time() . '_' . uniqid() . '.' . \$fileExt;\n";
        $content .= "    \$uploadFilePath = \$uploadPath . \$newFileName;\n";
        $content .= "    \$destination = __DIR__ . '/../' . \$uploadFilePath;\n";
        $content .= "    \n";
        $content .= "    // Move the file\n";
        $content .= "    if (move_uploaded_file(\$fileTmp, \$destination)) {\n";
        $content .= "        // Delete old file if it exists and is different\n";
        $content .= "        if (!empty(\$existingFile) && \$existingFile !== \$uploadFilePath && file_exists(__DIR__ . '/../' . \$existingFile)) {\n";
        $content .= "            @unlink(__DIR__ . '/../' . \$existingFile);\n";
        $content .= "        }\n";
        $content .= "        \n";
        $content .= "        return [\n";
        $content .= "            'success' => true,\n";
        $content .= "            'file_path' => \$uploadFilePath,\n";
        $content .= "            'error_message' => ''\n";
        $content .= "        ];\n";
        $content .= "    } else {\n";
        $content .= "        return [\n";
        $content .= "            'success' => false,\n";
        $content .= "            'file_path' => \$existingFile,\n";
        $content .= "            'error_message' => \"Failed to move uploaded file\"\n";
        $content .= "        ];\n";
        $content .= "    }\n";
        $content .= "}\n\n";
        
        // Main switch statement for handling different actions
        $content .= "// Default response\n";
        $content .= "\$response = ['success' => false, 'message' => 'Invalid action or request method.'];\n\n";
        
        $content .= "// Get the action from request parameters\n";
        $content .= "\$action = isset(\$_POST['action']) ? \$_POST['action'] : (isset(\$_GET['action']) ? \$_GET['action'] : '');\n\n";
        
        $content .= "// Main switch for handling different actions\n";
        $content .= "switch (\$action) {\n";
        
        // Generate code for different actions
        $content .= $this->generateFetchAction();
        $content .= $this->generateGetAction();
        $content .= $this->generateSaveAction();
        $content .= $this->generateDeleteAction();
        $content .= $this->generateBatchDeleteAction();
        $content .= $this->generateBatchUpdateAction();
        $content .= $this->generateExportAction();
        $content .= $this->generateImportCsvActionCase();
        $content .= $this->generateForeignKeySearchActions();
        
        // Default case
        $content .= "    default:\n";
        $content .= "        \$response = ['success' => false, 'message' => 'Invalid action: ' . \$action];\n";
        $content .= "}\n\n";
        
        // Output response
        $content .= "// Return JSON response\n";
        $content .= "header('Content-Type: application/json');\n";
        $content .= "echo json_encode(\$response);\n";
        
        try {
            // Ensure the actions directory exists
            $this->ensureDirectoryExists($this->projectBaseDir . "/actions");
            
            file_put_contents($actionsPath, $content);
            echo "Generated Actions PHP File: $actionsPath\n";
        } catch (Exception $e) {
            throw new Exception("Error writing Actions PHP File for {$this->tableName}: " . $e->getMessage());
        }
        
        return $actionsPath;
    }

    /**
     * Generate fetch action for retrieving lists of records
     * 
     * @return string PHP code for fetch action
     */
    private function generateFetchAction(): string {
        $content = "    // Fetch records with pagination, sorting, and filtering\n";
        $content .= "    case 'fetch':\n";
        $content .= "        // Check read permission\n";
        $content .= "        if (!check_permission('read_manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Permission denied.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Pagination parameters\n";
        $content .= "        \$page = isset(\$_GET['page']) ? intval(\$_GET['page']) : 1;\n";
        $content .= "        \$limit = isset(\$_GET['limit']) ? intval(\$_GET['limit']) : " . ($this->config['itemsPerPage'] ?? 10) . ";\n";
        $content .= "        \$offset = (\$page - 1) * \$limit;\n\n";
        
        $content .= "        // Sorting parameters\n";
        $content .= "        \$sortField = isset(\$_GET['sort_field']) ? \$_GET['sort_field'] : '{$this->primaryKey}';\n";
        $content .= "        \$sortDirection = isset(\$_GET['sort_direction']) ? strtoupper(\$_GET['sort_direction']) : 'DESC';\n\n";
        
        $content .= "        // Search parameter\n";
        $content .= "        \$search = isset(\$_GET['search']) ? \$_GET['search'] : '';\n\n";
        
        $content .= "        // Validate sort field to prevent SQL injection\n";
        $content .= "        \$validSortFields = ['" . implode("', '", $this->columns) . "'];\n";
        $content .= "        if (!in_array(\$sortField, \$validSortFields)) {\n";
        $content .= "            \$sortField = '{$this->primaryKey}';\n";
        $content .= "        }\n\n";
        
        $content .= "        // Validate sort direction\n";
        $content .= "        if (\$sortDirection !== 'ASC' && \$sortDirection !== 'DESC') {\n";
        $content .= "            \$sortDirection = 'DESC';\n";
        $content .= "        }\n\n";
        
        // Build query with joins for foreign keys
        $content .= "        // Build SQL query with foreign key joins\n";
        $content .= "        \$query = \"SELECT a.*";
        
        // Add fields from foreign keys
        foreach ($this->foreignKeys as $column => $fkDetails) {
            if ($fkDetails['field'] !== $fkDetails['key']) { // Don't select the same field twice
                $content .= ", b{$column}.{$fkDetails['field']} AS {$fkDetails['field']}";
            }
        }
        
        $content .= " FROM {$this->tableName} a\";\n\n";
        
        // Add joins for foreign keys
        if (!empty($this->foreignKeys)) {
            $content .= "        // Join foreign key tables\n";
            foreach ($this->foreignKeys as $column => $fkDetails) {
                $content .= "        \$query .= \" LEFT JOIN {$fkDetails['table']} b{$column} ON a.{$column} = b{$column}.{$fkDetails['key']}\";\n";
            }
            $content .= "\n";
        }
        
        // Add search conditions
        $content .= "        // Add search conditions\n";
        $content .= "        \$whereConditions = [];\n";
        $content .= "        \$params = [];\n";
        $content .= "        \$types = '';\n\n";
        
        $content .= "        if (!empty(\$search)) {\n";
        $content .= "            \$searchConditions = [];\n";
        
        // Add searchable fields
        $searchableFields = [];
        foreach ($this->columns as $column) {
            // Skip non-searchable fields
            if (in_array($column, ['created_at', 'updated_at', 'created_by', 'updated_by']) || 
                $this->getColumnFormType($column) === 'password' ||
                $this->getColumnFormType($column) === 'file' ||
                $this->getColumnFormType($column) === 'image') {
                continue;
            }
            
            $searchableFields[] = $column;
        }
        
        if (!empty($searchableFields)) {
            $content .= "            // Search in these fields\n";
            foreach ($searchableFields as $field) {
                $content .= "            \$searchConditions[] = \"a.{$field} LIKE ?\";\n";
                $content .= "            \$params[] = \"%{\$search}%\";\n";
                $content .= "            \$types .= 's';\n";
            }
            $content .= "\n";
        }
        
        // Also search in foreign key display fields
        if (!empty($this->foreignKeys)) {
            $content .= "            // Search in foreign key display fields\n";
            foreach ($this->foreignKeys as $column => $fkDetails) {
                if (isset($fkDetails['field']) && !empty($fkDetails['field'])) {
                    $content .= "            \$searchConditions[] = \"b{$column}.{$fkDetails['field']} LIKE ?\";\n";
                    $content .= "            \$params[] = \"%{\$search}%\";\n";
                    $content .= "            \$types .= 's';\n";
                }
            }
            $content .= "\n";
        }
        
        $content .= "            if (!empty(\$searchConditions)) {\n";
        $content .= "                \$whereConditions[] = '(' . implode(' OR ', \$searchConditions) . ')';\n";
        $content .= "            }\n";
        $content .= "        }\n\n";
        
        // Add custom filter conditions
        $content .= "        // Add custom filter conditions from GET parameters\n";
        $content .= "        foreach (\$_GET as \$param => \$value) {\n";
        $content .= "            if (strpos(\$param, 'filter_') === 0 && !empty(\$value)) {\n";
        $content .= "                \$field = substr(\$param, 7); // Remove 'filter_' prefix\n";
        $content .= "                if (in_array(\$field, \$validSortFields)) {\n";
        $content .= "                    \$whereConditions[] = \"a.{\$field} = ?\";\n";
        $content .= "                    \$params[] = \$value;\n";
        $content .= "                    \$types .= get_bind_type_for_column(\$field);\n";
        $content .= "                }\n";
        $content .= "            }\n";
        $content .= "        }\n\n";
        
        // Complete the query with WHERE, ORDER BY, LIMIT
        $content .= "        // Combine WHERE conditions\n";
        $content .= "        if (!empty(\$whereConditions)) {\n";
        $content .= "            \$query .= \" WHERE \" . implode(' AND ', \$whereConditions);\n";
        $content .= "        }\n\n";
        
        $content .= "        // Count total rows for pagination\n";
        $content .= "        \$countQuery = \"SELECT COUNT(*) as total FROM (\" . \$query . \") AS count_query\";\n";
        $content .= "        \$countStmt = \$conn->prepare(\$countQuery);\n\n";
        
        $content .= "        if (\$countStmt) {\n";
        $content .= "            if (!empty(\$types)) {\n";
        $content .= "                \$countStmt->bind_param(\$types, ...\$params);\n";
        $content .= "            }\n";
        $content .= "            \$countStmt->execute();\n";
        $content .= "            \$totalResult = \$countStmt->get_result();\n";
        $content .= "            \$totalRow = \$totalResult->fetch_assoc();\n";
        $content .= "            \$totalRecords = \$totalRow['total'];\n";
        $content .= "            \$countStmt->close();\n";
        $content .= "        } else {\n";
        $content .= "            \$totalRecords = 0;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Calculate total pages\n";
        $content .= "        \$totalPages = ceil(\$totalRecords / \$limit);\n\n";
        
        $content .= "        // Add ORDER BY and LIMIT to the main query\n";
        $content .= "        \$query .= \" ORDER BY a.{\$sortField} {\$sortDirection} LIMIT ?, ?\";\n\n";
        
        $content .= "        // Add pagination parameters\n";
        $content .= "        \$params[] = \$offset;\n";
        $content .= "        \$params[] = \$limit;\n";
        $content .= "        \$types .= 'ii';\n\n";
        
        $content .= "        // Execute the main query\n";
        $content .= "        \$stmt = \$conn->prepare(\$query);\n";
        $content .= "        \n";
        $content .= "        if (!\$stmt) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Database query error: ' . \$conn->error];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        if (!empty(\$types)) {\n";
        $content .= "            \$stmt->bind_param(\$types, ...\$params);\n";
        $content .= "        }\n\n";
        
        $content .= "        if (!\$stmt->execute()) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Database execute error: ' . \$stmt->error];\n";
        $content .= "            \$stmt->close();\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$result = \$stmt->get_result();\n";
        $content .= "        \$data = [];\n\n";
        
        $content .= "        while (\$row = \$result->fetch_assoc()) {\n";
        $content .= "            // Process special field types (dates, etc.)\n";
        
        // Format dates and other special fields
        $dateFields = [];
        $fileFields = [];
        $passwordFields = [];
        
        foreach ($this->columns as $column) {
            $formType = $this->getColumnFormType($column);
            
            if (in_array($formType, ['date', 'datetime-local'])) {
                $dateFields[] = $column;
            } else if (in_array($formType, ['file', 'image'])) {
                $fileFields[] = $column;
            } else if ($formType === 'password') {
                $passwordFields[] = $column;
            }
        }
        
        if (!empty($dateFields)) {
            $content .= "            // Format date fields\n";
            foreach ($dateFields as $field) {
                $dateFormat = $this->getColumnFormType($field) === 'date' ? 
                    $this->config['dateFormat'] : $this->config['dateTimeFormat'];
                $content .= "            if (isset(\$row['{$field}']) && !empty(\$row['{$field}'])) {\n";
                $content .= "                \$row['{$field}'] = date('{$dateFormat}', strtotime(\$row['{$field}']));\n";
                $content .= "            }\n";
            }
            $content .= "\n";
        }
        
        if (!empty($passwordFields)) {
            $content .= "            // Remove password values\n";
            foreach ($passwordFields as $field) {
                $content .= "            if (isset(\$row['{$field}'])) {\n";
                $content .= "                \$row['{$field}'] = null;\n";
                $content .= "            }\n";
            }
            $content .= "\n";
        }
        
        $content .= "            \$data[] = \$row;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$stmt->close();\n\n";
        
        $content .= "        // Check permissions for CRUD operations\n";
        $content .= "        \$permissions = [\n";
        $content .= "            'create' => check_permission('create_manage_{$this->tableName}'),\n";
        $content .= "            'update' => check_permission('update_manage_{$this->tableName}'),\n";
        $content .= "            'delete' => check_permission('delete_manage_{$this->tableName}'),\n";
        $content .= "            'import' => check_permission('import_manage_{$this->tableName}'),\n";
        $content .= "            'export' => check_permission('export_manage_{$this->tableName}')\n";
        $content .= "        ];\n\n";
        
        $content .= "        \$response = [\n";
        $content .= "            'success' => true,\n";
        $content .= "            'data' => \$data,\n";
        $content .= "            'pagination' => [\n";
        $content .= "                'total_records' => \$totalRecords,\n";
        $content .= "                'total_pages' => \$totalPages,\n";
        $content .= "                'current_page' => \$page,\n";
        $content .= "                'per_page' => \$limit\n";
        $content .= "            ],\n";
        $content .= "            'permissions' => \$permissions\n";
        $content .= "        ];\n";
        $content .= "        break;\n\n";
        
        return $content;
    }

    /**
     * Generate get action for retrieving a single record
     * 
     * @return string PHP code for get action
     */
    private function generateGetAction(): string {
        $content = "    // Get a single record by ID\n";
        $content .= "    case 'get':\n";
        $content .= "        // Check read permission\n";
        $content .= "        if (!check_permission('read_manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Permission denied.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$id = isset(\$_GET['id']) ? intval(\$_GET['id']) : 0;\n";
        $content .= "        if (!\$id) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid ID.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Build query with foreign key joins\n";
        $content .= "        \$query = \"SELECT a.*";
        
        // Add fields from foreign keys
        foreach ($this->foreignKeys as $column => $fkDetails) {
            if ($fkDetails['field'] !== $fkDetails['key']) { // Don't select the same field twice
                $content .= ", b{$column}.{$fkDetails['field']} AS {$fkDetails['field']}";
            }
        }
        
        $content .= " FROM {$this->tableName} a\";\n\n";
        
        // Add joins for foreign keys
        if (!empty($this->foreignKeys)) {
            $content .= "        // Join foreign key tables\n";
            foreach ($this->foreignKeys as $column => $fkDetails) {
                $content .= "        \$query .= \" LEFT JOIN {$fkDetails['table']} b{$column} ON a.{$column} = b{$column}.{$fkDetails['key']}\";\n";
            }
            $content .= "\n";
        }
        
        $content .= "        \$query .= \" WHERE a.{$this->primaryKey} = ?\";\n\n";
        
        $content .= "        \$stmt = \$conn->prepare(\$query);\n";
        $content .= "        if (!\$stmt) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Database query error: ' . \$conn->error];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$stmt->bind_param('i', \$id);\n";
        $content .= "        \$stmt->execute();\n";
        $content .= "        \$result = \$stmt->get_result();\n\n";
        
        $content .= "        if (\$result->num_rows === 0) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Record not found.'];\n";
        $content .= "            \$stmt->close();\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$data = \$result->fetch_assoc();\n";
        $content .= "        \$stmt->close();\n\n";
        
        // Process special field types
        $content .= "        // Process special field types\n";
        
        // Format dates and other special fields
        $dateFields = [];
        $fileFields = [];
        
        foreach ($this->columns as $column) {
            $formType = $this->getColumnFormType($column);
            
            if (in_array($formType, ['date', 'datetime-local'])) {
                $dateFields[] = $column;
            } else if (in_array($formType, ['file', 'image'])) {
                $fileFields[] = $column;
            }
        }
        
        if (!empty($dateFields)) {
            $content .= "        // Format date fields for form inputs\n";
            foreach ($dateFields as $field) {
                $format = $this->getColumnFormType($field) === 'date' ? 'Y-m-d' : 'Y-m-d\TH:i';
                $content .= "        if (isset(\$data['{$field}']) && !empty(\$data['{$field}'])) {\n";
                $content .= "            \$data['{$field}'] = date('{$format}', strtotime(\$data['{$field}']));\n";
                $content .= "        }\n";
            }
            $content .= "\n";
        }
        
        $content .= "        // Generate new CSRF token for edit form\n";
        $content .= "        \$response = [\n";
        $content .= "            'success' => true,\n";
        $content .= "            'data' => \$data,\n";
        $content .= "            'new_csrf_token_for_edit_form' => bin2hex(random_bytes(32))\n";
        $content .= "        ];\n";
        $content .= "        break;\n\n";
        
        return $content;
    }

    /**
     * Generate save action for creating/updating records
     * 
     * @return string PHP code for save action
     */
    private function generateSaveAction(): string {
        $content = "    // Save (create or update) a record\n";
        $content .= "    case 'save':\n";
        $content .= "        // Verify CSRF token\n";
        $content .= "        if (!isset(\$_POST['csrf_token']) || !verify_csrf_token(\$_POST['csrf_token'], 'manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid security token.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Get primary key value to determine if this is an insert or update\n";
        $content .= "        \$id = isset(\$_POST['{$this->primaryKey}']) && !empty(\$_POST['{$this->primaryKey}']) ? intval(\$_POST['{$this->primaryKey}']) : 0;\n";
        $content .= "        \$isUpdate = \$id > 0;\n\n";
        
        $content .= "        // Check appropriate permission\n";
        $content .= "        if (\$isUpdate) {\n";
        $content .= "            if (!check_permission('update_manage_{$this->tableName}')) {\n";
        $content .= "                \$response = ['success' => false, 'message' => 'Permission denied to update records.'];\n";
        $content .= "                break;\n";
        $content .= "            }\n";
        $content .= "        } else {\n";
        $content .= "            if (!check_permission('create_manage_{$this->tableName}')) {\n";
        $content .= "                \$response = ['success' => false, 'message' => 'Permission denied to create records.'];\n";
        $content .= "                break;\n";
        $content .= "            }\n";
        $content .= "        }\n\n";
        
        // Validation logic
        $content .= "        // Validation\n";
        $content .= "        \$errors = [];\n";
        
        // Required fields validation
        $requiredFields = [];
        foreach ($this->columns as $column) {
            if ($column !== $this->primaryKey && 
                !in_array($column, ['created_at', 'updated_at', 'created_by', 'updated_by']) && 
                !$this->isColumnNullable($column)) {
                $requiredFields[] = $column;
            }
        }
        
        if (!empty($requiredFields)) {
            $content .= "        // Required fields validation\n";
            foreach ($requiredFields as $field) {
                // Skip file fields if updating (existing file may be kept)
                if (in_array($this->getColumnFormType($field), ['file', 'image'])) {
                    $content .= "        if (!isset(\$_FILES['{$field}']) || \$_FILES['{$field}']['error'] === UPLOAD_ERR_NO_FILE) {\n";
                    $content .= "            // For updates, check if there's an existing file\n";
                    $content .= "            if (!\$isUpdate || empty(\$_POST['existing_{$field}'])) {\n";
                    $content .= "                \$errors['{$field}'] = '" . $this->getColumnLabel($field) . " is required.';\n";
                    $content .= "            }\n";
                    $content .= "        }\n";
                } else {
                    $content .= "        if (!isset(\$_POST['{$field}']) || trim(\$_POST['{$field}']) === '') {\n";
                    $content .= "            \$errors['{$field}'] = '" . $this->getColumnLabel($field) . " is required.';\n";
                    $content .= "        }\n";
                }
            }
            $content .= "\n";
        }
        
        // Custom validations based on field types
        $content .= "        // Custom validations based on field types\n";
        
        foreach ($this->columns as $column) {
            $formType = $this->getColumnFormType($column);
            $rules = $this->getValidationRules($column);
            
            // Skip primary key, system fields, and required validation (already handled)
            if ($column === $this->primaryKey || 
                in_array($column, ['created_at', 'updated_at', 'created_by', 'updated_by']) ||
                (count($rules) === 1 && $rules[0] === 'required')) {
                continue;
            }
            
            if ($formType === 'email') {
                $content .= "        if (isset(\$_POST['{$column}']) && !empty(\$_POST['{$column}']) && !filter_var(\$_POST['{$column}'], FILTER_VALIDATE_EMAIL)) {\n";
                $content .= "            \$errors['{$column}'] = 'Please enter a valid email address.';\n";
                $content .= "        }\n";
                continue;
            }
            
            if (in_array($formType, ['file', 'image'])) {
                if (strpos(implode(' ', $rules), 'mimes:') !== false) {
                    foreach ($rules as $rule) {
                        if (strpos($rule, 'mimes:') === 0) {
                            $mimes = explode(',', substr($rule, 6));
                            
                            $content .= "        // File type validation for {$column}\n";
                            $content .= "        if (isset(\$_FILES['{$column}']) && \$_FILES['{$column}']['error'] === UPLOAD_ERR_OK) {\n";
                            $content .= "            \$allowedTypes = ['" . implode("', '", $mimes) . "'];\n";
                            $content .= "            \$fileExt = strtolower(pathinfo(\$_FILES['{$column}']['name'], PATHINFO_EXTENSION));\n";
                            $content .= "            if (!in_array(\$fileExt, \$allowedTypes)) {\n";
                            $content .= "                \$errors['{$column}'] = 'Only " . implode(', ', $mimes) . " files are allowed.';\n";
                            $content .= "            }\n";
                            $content .= "        }\n";
                        }
                    }
                }
                
                if (strpos(implode(' ', $rules), 'max_size:') !== false) {
                    foreach ($rules as $rule) {
                        if (strpos($rule, 'max_size:') === 0) {
                            $maxSize = substr($rule, 9);
                            
                            $content .= "        // File size validation for {$column}\n";
                            $content .= "        if (isset(\$_FILES['{$column}']) && \$_FILES['{$column}']['error'] === UPLOAD_ERR_OK) {\n";
                            $content .= "            \$maxFileSize = {$maxSize} * 1024; // Convert to bytes\n";
                            $content .= "            if (\$_FILES['{$column}']['size'] > \$maxFileSize) {\n";
                            $content .= "                \$errors['{$column}'] = 'File size exceeds the maximum allowed size ({$maxSize}KB).';\n";
                            $content .= "            }\n";
                            $content .= "        }\n";
                        }
                    }
                }
                
                continue;
            }
            
            if (strpos(implode(' ', $rules), 'min:') !== false || strpos(implode(' ', $rules), 'max:') !== false) {
                $content .= "        // Length validation for {$column}\n";
                $content .= "        if (isset(\$_POST['{$column}']) && !empty(\$_POST['{$column}'])) {\n";
                
                foreach ($rules as $rule) {
                    if (strpos($rule, 'min:') === 0) {
                        $min = substr($rule, 4);
                        $content .= "            if (strlen(\$_POST['{$column}']) < {$min}) {\n";
                        $content .= "                \$errors['{$column}'] = '" . $this->getColumnLabel($column) . " must be at least {$min} characters.';\n";
                        $content .= "            }\n";
                    } else if (strpos($rule, 'max:') === 0) {
                        $max = substr($rule, 4);
                        $content .= "            if (strlen(\$_POST['{$column}']) > {$max}) {\n";
                        $content .= "                \$errors['{$column}'] = '" . $this->getColumnLabel($column) . " must not exceed {$max} characters.';\n";
                        $content .= "            }\n";
                    }
                }
                
                $content .= "        }\n";
            }
        }
        
        $content .= "\n        // Return validation errors if any\n";
        $content .= "        if (!empty(\$errors)) {\n";
        $content .= "            \$response = [\n";
        $content .= "                'success' => false,\n";
        $content .= "                'message' => 'Validation failed.',\n";
        $content .= "                'errors' => \$errors\n";
        $content .= "            ];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        // Begin transaction
        $content .= "        // Begin database transaction\n";
        $content .= "        \$conn->begin_transaction();\n\n";
        
        $content .= "        try {\n";
        
        // Handle file uploads first
        $fileUploadFields = [];
        foreach ($this->columns as $column) {
            if (in_array($this->getColumnFormType($column), ['file', 'image'])) {
                $fileUploadFields[] = $column;
            }
        }
        
        if (!empty($fileUploadFields)) {
            $content .= "            // Handle file uploads\n";
            
            foreach ($fileUploadFields as $field) {
                // Get upload path from column definition
                $uploadPath = $this->getColumnDef($field, 'upload_path', "uploads/{$this->tableName}/");
                if (substr($uploadPath, -1) !== '/') {
                    $uploadPath .= '/';
                }
                
                // Get allowed extensions from validation rules
                $allowedExtensions = [];
                $rules = $this->getValidationRules($field);
                
                foreach ($rules as $rule) {
                    if (strpos($rule, 'mimes:') === 0) {
                        $allowedExtensions = explode(',', substr($rule, 6));
                        break;
                    }
                }
                
                // Get max size from validation rules
                $maxSize = 2048; // Default 2MB
                foreach ($rules as $rule) {
                    if (strpos($rule, 'max_size:') === 0) {
                        $maxSize = intval(substr($rule, 9));
                        break;
                    }
                }
                
                $content .= "            // Process {$field} upload\n";
                $content .= "            \$existingFile = \$isUpdate ? (\$_POST['existing_{$field}'] ?? '') : '';\n";
                $content .= "            \$uploadResult = handle_file_upload('{$field}', '{$uploadPath}', ['" . implode("', '", $allowedExtensions) . "'], {$maxSize}, \$existingFile);\n";
                $content .= "            \n";
                $content .= "            if (!\$uploadResult['success']) {\n";
                $content .= "                throw new Exception('File upload error: ' . \$uploadResult['error_message']);\n";
                $content .= "            }\n";
                $content .= "            \n";
                $content .= "            \${$field}_path = \$uploadResult['file_path'];\n\n";
            }
        }
        
        // Get existing record if updating
        $content .= "            // Get existing record if updating\n";
        $content .= "            \$existingData = null;\n";
        $content .= "            if (\$isUpdate) {\n";
        $content .= "                \$getStmt = \$conn->prepare(\"SELECT * FROM {$this->tableName} WHERE {$this->primaryKey} = ?\");\n";
        $content .= "                \$getStmt->bind_param('i', \$id);\n";
        $content .= "                \$getStmt->execute();\n";
        $content .= "                \$existingResult = \$getStmt->get_result();\n";
        $content .= "                \n";
        $content .= "                if (\$existingResult->num_rows === 0) {\n";
        $content .= "                    throw new Exception('Record to update not found.');\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                \$existingData = \$existingResult->fetch_assoc();\n";
        $content .= "                \$getStmt->close();\n";
        $content .= "            }\n\n";
        
        // Prepare SQL for insert or update
        $content .= "            // Prepare data for database operation\n";
        $content .= "            \$fields = [];\n";
        $content .= "            \$values = [];\n";
        $content .= "            \$types = '';\n\n";
        
        // Process each field
        $content .= "            // Process each field\n";
        foreach ($this->columns as $column) {
            // Skip primary key for insert and system fields
            if (($column === $this->primaryKey && !$this->isColumnNullable($column)) ||
                in_array($column, ['created_at', 'updated_at'])) {
                continue;
            }
            
            $formType = $this->getColumnFormType($column);
            
            // Special handling for file fields
            if (in_array($formType, ['file', 'image'])) {
                $content .= "            // {$column} field (file upload)\n";
                $content .= "            \$fields['{$column}'] = \${$column}_path ?? \$existingData['{$column}'] ?? null;\n";
                $content .= "            \n";
                continue;
            }
            
            // Special handling for checkbox/boolean fields
            if (in_array($formType, ['checkbox'])) {
                $content .= "            // {$column} field (checkbox)\n";
                $content .= "            \$fields['{$column}'] = isset(\$_POST['{$column}']) ? 1 : 0;\n";
                $content .= "            \n";
                continue;
            }
            
            // Special handling for boolean_select fields
            if ($formType === 'boolean_select') {
                $content .= "            // {$column} field (boolean)\n";
                $content .= "            \$fields['{$column}'] = isset(\$_POST['{$column}']) && \$_POST['{$column}'] ? 1 : 0;\n";
                $content .= "            \n";
                continue;
            }
            
            // Special handling for password fields
            if ($formType === 'password') {
                $content .= "            // {$column} field (password)\n";
                $content .= "            if (isset(\$_POST['{$column}']) && !empty(\$_POST['{$column}'])) {\n";
                $content .= "                \$fields['{$column}'] = password_hash(\$_POST['{$column}'], PASSWORD_DEFAULT);\n";
                $content .= "            } else if (\$isUpdate) {\n";
                $content .= "                // Keep existing password if not provided during update\n";
                $content .= "                // Do nothing, field will not be updated\n";
                $content .= "            } else {\n";
                $content .= "                // For new records with nullable password\n";
                if ($this->isColumnNullable($column)) {
                    $content .= "                \$fields['{$column}'] = null;\n";
                } else {
                    $content .= "                throw new Exception('Password is required for new records.');\n";
                }
                $content .= "            }\n";
                $content .= "            \n";
                continue;
            }
            
            // Special handling for multi_select fields
            if ($formType === 'multi_select') {
                $content .= "            // {$column} field (multi-select)\n";
                $content .= "            if (isset(\$_POST['{$column}']) && is_array(\$_POST['{$column}'])) {\n";
                $content .= "                \$fields['{$column}'] = implode(',', \$_POST['{$column}']);\n";
                $content .= "            } else {\n";
                $content .= "                \$fields['{$column}'] = '';\n";
                $content .= "            }\n";
                $content .= "            \n";
                continue;
            }
            
            // Standard field handling
            $content .= "            // {$column} field\n";
            $content .= "            if (isset(\$_POST['{$column}'])) {\n";
            if ($this->isColumnNullable($column)) {
                $content .= "                \$fields['{$column}'] = empty(\$_POST['{$column}']) ? null : \$_POST['{$column}'];\n";
            } else {
                $content .= "                \$fields['{$column}'] = \$_POST['{$column}'];\n";
            }
            $content .= "            }\n";
            $content .= "            \n";
        }
        
        // Audit fields
        $content .= "            // Audit fields\n";
        $content .= "            \$currentUserId = get_current_user_id();\n";
        
        if (in_array('created_by', $this->columns)) {
            $content .= "            if (!\$isUpdate) {\n";
            $content .= "                \$fields['created_by'] = \$currentUserId;\n";
            $content .= "            }\n";
        }
        
        if (in_array('updated_by', $this->columns)) {
            $content .= "            \$fields['updated_by'] = \$currentUserId;\n";
        }
        
        $content .= "\n";
        
        // Build SQL for insert or update
        $content .= "            // Build SQL statement\n";
        $content .= "            if (\$isUpdate) {\n";
        $content .= "                // UPDATE query\n";
        $content .= "                \$sql = \"UPDATE {$this->tableName} SET \";\n";
        $content .= "                \$updateParts = [];\n";
        $content .= "                \n";
        $content .= "                foreach (\$fields as \$field => \$value) {\n";
        $content .= "                    \$updateParts[] = \"`\$field` = ?\";\n";
        $content .= "                    \$values[] = \$value;\n";
        $content .= "                    \$types .= get_bind_type_for_column(\$field);\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                // Add updated_at if not already set\n";
        $content .= "                if (!isset(\$fields['updated_at']) && in_array('updated_at', ['" . implode("', '", $this->columns) . "'])) {\n";
        $content .= "                    \$updateParts[] = \"`updated_at` = CURRENT_TIMESTAMP\";\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                \$sql .= implode(', ', \$updateParts) . \" WHERE {$this->primaryKey} = ?\";\n";
        $content .= "                \$values[] = \$id;\n";
        $content .= "                \$types .= 'i';\n";
        $content .= "            } else {\n";
        $content .= "                // INSERT query\n";
        $content .= "                \$sql = \"INSERT INTO {$this->tableName} (\";\n";
        $content .= "                \$fieldNames = array_keys(\$fields);\n";
        $content .= "                \n";
        $content .= "                // Add created_at if not already set\n";
        $content .= "                if (!isset(\$fields['created_at']) && in_array('created_at', ['" . implode("', '", $this->columns) . "'])) {\n";
        $content .= "                    \$fieldNames[] = 'created_at';\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                // Add updated_at if not already set\n";
        $content .= "                if (!isset(\$fields['updated_at']) && in_array('updated_at', ['" . implode("', '", $this->columns) . "'])) {\n";
        $content .= "                    \$fieldNames[] = 'updated_at';\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                \$sql .= \"`\" . implode(\"`, `\", \$fieldNames) . \"`) VALUES (\";\n";
        $content .= "                \n";
        $content .= "                \$placeholders = [];\n";
        $content .= "                foreach (\$fields as \$field => \$value) {\n";
        $content .= "                    \$placeholders[] = '?';\n";
        $content .= "                    \$values[] = \$value;\n";
        $content .= "                    \$types .= get_bind_type_for_column(\$field);\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                // Add timestamp placeholders\n";
        $content .= "                if (!isset(\$fields['created_at']) && in_array('created_at', ['" . implode("', '", $this->columns) . "'])) {\n";
        $content .= "                    \$placeholders[] = 'CURRENT_TIMESTAMP';\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                if (!isset(\$fields['updated_at']) && in_array('updated_at', ['" . implode("', '", $this->columns) . "'])) {\n";
        $content .= "                    \$placeholders[] = 'CURRENT_TIMESTAMP';\n";
        $content .= "                }\n";
        $content .= "                \n";
        $content .= "                \$sql .= implode(\", \", \$placeholders) . \")\";\n";
        $content .= "            }\n\n";
        
        // Execute query
        $content .= "            // Execute the query\n";
        $content .= "            \$stmt = \$conn->prepare(\$sql);\n";
        $content .= "            \n";
        $content .= "            if (!\$stmt) {\n";
        $content .= "                throw new Exception('Database prepare error: ' . \$conn->error);\n";
        $content .= "            }\n";
        $content .= "            \n";
        $content .= "            if (!empty(\$types) && !empty(\$values)) {\n";
        $content .= "                \$stmt->bind_param(\$types, ...\$values);\n";
        $content .= "            }\n";
        $content .= "            \n";
        $content .= "            if (!\$stmt->execute()) {\n";
        $content .= "                throw new Exception('Database execute error: ' . \$stmt->error);\n";
        $content .= "            }\n\n";
        
        // Get the inserted ID for new records
        $content .= "            // Get the inserted ID for new records\n";
        $content .= "            if (!\$isUpdate) {\n";
        $content .= "                \$id = \$stmt->insert_id;\n";
        $content .= "            }\n";
        $content .= "            \n";
        $content .= "            \$stmt->close();\n";
        
        // Commit transaction and create response
        $content .= "            // Commit transaction\n";
        $content .= "            \$conn->commit();\n";
        $content .= "            \n";
        $content .= "            // Generate new CSRF token for next form\n";
        $content .= "            \$new_csrf_token = bin2hex(random_bytes(32));\n";
        $content .= "            \n";
        $content .= "            \$response = [\n";
        $content .= "                'success' => true,\n";
        $content .= "                'message' => (\$isUpdate ? 'Record updated' : 'Record added') . ' successfully.',\n";
        $content .= "                'id' => \$id,\n";
        $content .= "                'new_csrf_token' => \$new_csrf_token\n";
        $content .= "            ];\n";
        $content .= "            \n";
        $content .= "        } catch (Exception \$e) {\n";
        $content .= "            // Rollback transaction on error\n";
        $content .= "            \$conn->rollback();\n";
        $content .= "            \n";
        $content .= "            \$response = ['success' => false, 'message' => \$e->getMessage()];\n";
        $content .= "        }\n";
        $content .= "        break;\n\n";
        
        return $content;
    }

    /**
     * Generate delete action for removing records
     * 
     * @return string PHP code for delete action
     */
    private function generateDeleteAction(): string {
        $content = "    // Delete a record\n";
        $content .= "    case 'delete':\n";
        $content .= "        // Verify CSRF token\n";
        $content .= "        if (!isset(\$_POST['csrf_token']) || !verify_csrf_token(\$_POST['csrf_token'], 'manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid security token.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Check delete permission\n";
        $content .= "        if (!check_permission('delete_manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Permission denied to delete records.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$id = isset(\$_POST['id']) ? intval(\$_POST['id']) : 0;\n";
        $content .= "        if (!\$id) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid ID.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Begin transaction\n";
        $content .= "        \$conn->begin_transaction();\n\n";
        
        $content .= "        try {\n";
        
        // Get file fields to delete associated files
        $fileFields = [];
        foreach ($this->columns as $column) {
            if (in_array($this->getColumnFormType($column), ['file', 'image'])) {
                $fileFields[] = $column;
            }
        }
        
        if (!empty($fileFields)) {
            $content .= "            // Get file paths before deleting the record\n";
            $content .= "            \$fileQuery = \"SELECT `" . implode("`, `", $fileFields) . "` FROM {$this->tableName} WHERE {$this->primaryKey} = ?\";\n";
            $content .= "            \$fileStmt = \$conn->prepare(\$fileQuery);\n";
            $content .= "            \$fileStmt->bind_param('i', \$id);\n";
            $content .= "            \$fileStmt->execute();\n";
            $content .= "            \$fileResult = \$fileStmt->get_result();\n";
            $content .= "            \$filePaths = \$fileResult->fetch_assoc();\n";
            $content .= "            \$fileStmt->close();\n\n";
        }
        
        $content .= "            // Delete the record\n";
        $content .= "            \$deleteStmt = \$conn->prepare(\"DELETE FROM {$this->tableName} WHERE {$this->primaryKey} = ?\");\n";
        $content .= "            \$deleteStmt->bind_param('i', \$id);\n";
        $content .= "            \n";
        $content .= "            if (!\$deleteStmt->execute()) {\n";
        $content .= "                // Check for foreign key constraint error\n";
        $content .= "                if (\$deleteStmt->errno === 1451) {\n";
        $content .= "                    throw new Exception('Cannot delete this record because it is referenced by other records.');\n";
        $content .= "                } else {\n";
        $content .= "                    throw new Exception('Error deleting record: ' . \$deleteStmt->error);\n";
        $content .= "                }\n";
        $content .= "            }\n";
        $content .= "            \n";
        $content .= "            \$affectedRows = \$deleteStmt->affected_rows;\n";
        $content .= "            \$deleteStmt->close();\n";
        $content .= "            \n";
        $content .= "            if (\$affectedRows === 0) {\n";
        $content .= "                throw new Exception('Record not found or already deleted.');\n";
        $content .= "            }\n\n";
        
        // Delete associated files
        if (!empty($fileFields)) {
            $content .= "            // Delete associated files\n";
            $content .= "            if (\$filePaths) {\n";
            
            foreach ($fileFields as $field) {
                $content .= "                if (!empty(\$filePaths['{$field}']) && file_exists(__DIR__ . '/../' . \$filePaths['{$field}'])) {\n";
                $content .= "                    @unlink(__DIR__ . '/../' . \$filePaths['{$field}']);\n";
                $content .= "                }\n";
            }
            
            $content .= "            }\n\n";
        }
        
        $content .= "            // Commit transaction\n";
        $content .= "            \$conn->commit();\n";
        $content .= "            \n";
        $content .= "            \$response = ['success' => true, 'message' => 'Record deleted successfully.'];\n";
        $content .= "            \n";
        $content .= "        } catch (Exception \$e) {\n";
        $content .= "            // Rollback transaction on error\n";
        $content .= "            \$conn->rollback();\n";
        $content .= "            \n";
        $content .= "            \$response = ['success' => false, 'message' => \$e->getMessage()];\n";
        $content .= "        }\n";
        $content .= "        break;\n\n";
        
        return $content;
    }

    /**
     * Generate batch delete action for removing multiple records
     * 
     * @return string PHP code for batch delete action
     */
    private function generateBatchDeleteAction(): string {
        if (!$this->config['enableBatchOperations']) {
            return "    // Batch operations are disabled\n";
        }
        
        $content = "    // Batch delete multiple records\n";
        $content .= "    case 'batch_delete':\n";
        $content .= "        // Verify CSRF token\n";
        $content .= "        if (!isset(\$_POST['csrf_token']) || !verify_csrf_token(\$_POST['csrf_token'], 'manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid security token.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Check delete permission\n";
        $content .= "        if (!check_permission('delete_manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Permission denied to delete records.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$ids = isset(\$_POST['ids']) ? \$_POST['ids'] : '';\n";
        $content .= "        if (empty(\$ids)) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'No records selected for deletion.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Parse IDs string to array\n";
        $content .= "        \$idArray = explode(',', \$ids);\n";
        $content .= "        \$idArray = array_map('intval', \$idArray);\n";
        $content .= "        \$idArray = array_filter(\$idArray); // Remove zero values\n\n";
        
        $content .= "        if (empty(\$idArray)) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid IDs provided.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Begin transaction\n";
        $content .= "        \$conn->begin_transaction();\n\n";
        
        $content .= "        try {\n";
        
        // Get file fields to delete associated files
        $fileFields = [];
        foreach ($this->columns as $column) {
            if (in_array($this->getColumnFormType($column), ['file', 'image'])) {
                $fileFields[] = $column;
            }
        }
        
        if (!empty($fileFields)) {
            $content .= "            // Get file paths before deleting records\n";
            $content .= "            \$placeholders = str_repeat('?,', count(\$idArray) - 1) . '?';\n";
            $content .= "            \$fileQuery = \"SELECT {$this->primaryKey}, `" . implode("`, `", $fileFields) . "` FROM {$this->tableName} WHERE {$this->primaryKey} IN (\$placeholders)\";\n";
            $content .= "            \$fileStmt = \$conn->prepare(\$fileQuery);\n";
            $content .= "            \n";
            $content .= "            if (\$fileStmt) {\n";
            $content .= "                // Create param type string and values array\n";
            $content .= "                \$types = str_repeat('i', count(\$idArray));\n";
            $content .= "                \$fileStmt->bind_param(\$types, ...\$idArray);\n";
            $content .= "                \$fileStmt->execute();\n";
            $content .= "                \$fileResult = \$fileStmt->get_result();\n";
            $content .= "                \$filesToDelete = [];\n";
            $content .= "                \n";
            $content .= "                while (\$row = \$fileResult->fetch_assoc()) {\n";
            
            foreach ($fileFields as $field) {
                $content .= "                    if (!empty(\$row['{$field}'])) {\n";
                $content .= "                        \$filesToDelete[] = \$row['{$field}'];\n";
                $content .= "                    }\n";
            }
            
            $content .= "                }\n";
            $content .= "                \n";
            $content .= "                \$fileStmt->close();\n";
            $content .= "            }\n\n";
        }
        
        $content .= "            // Delete records\n";
        $content .= "            \$placeholders = str_repeat('?,', count(\$idArray) - 1) . '?';\n";
        $content .= "            \$deleteQuery = \"DELETE FROM {$this->tableName} WHERE {$this->primaryKey} IN (\$placeholders)\";\n";
        $content .= "            \$deleteStmt = \$conn->prepare(\$deleteQuery);\n";
        $content .= "            \n";
        $content .= "            if (!\$deleteStmt) {\n";
        $content .= "                throw new Exception('Database prepare error: ' . \$conn->error);\n";
        $content .= "            }\n";
        $content .= "            \n";
        $content .= "            // Create param type string and values array\n";
        $content .= "            \$types = str_repeat('i', count(\$idArray));\n";
        $content .= "            \$deleteStmt->bind_param(\$types, ...\$idArray);\n";
        $content .= "            \n";
        $content .= "            if (!\$deleteStmt->execute()) {\n";
        $content .= "                // Check for foreign key constraint error\n";
        $content .= "                if (\$deleteStmt->errno === 1451) {\n";
        $content .= "                    throw new Exception('Cannot delete one or more records because they are referenced by other records.');\n";
        $content .= "                } else {\n";
        $content .= "                    throw new Exception('Error deleting records: ' . \$deleteStmt->error);\n";
        $content .= "                }\n";
        $content .= "            }\n";
        $content .= "            \n";
        $content .= "            \$affectedRows = \$deleteStmt->affected_rows;\n";
        $content .= "            \$deleteStmt->close();\n\n";
        
        // Delete associated files
        if (!empty($fileFields)) {
            $content .= "            // Delete associated files\n";
            $content .= "            if (!empty(\$filesToDelete)) {\n";
            $content .= "                foreach (\$filesToDelete as \$filePath) {\n";
            $content .= "                    if (file_exists(__DIR__ . '/../' . \$filePath)) {\n";
            $content .= "                        @unlink(__DIR__ . '/../' . \$filePath);\n";
            $content .= "                    }\n";
            $content .= "                }\n";
            $content .= "            }\n\n";
        }
        
        $content .= "            // Commit transaction\n";
        $content .= "            \$conn->commit();\n";
        $content .= "            \n";
        $content .= "            \$response = [\n";
        $content .= "                'success' => true,\n";
        $content .= "                'message' => \$affectedRows . ' record(s) deleted successfully.',\n";
        $content .= "                'affected_rows' => \$affectedRows\n";
        $content .= "            ];\n";
        $content .= "            \n";
        $content .= "        } catch (Exception \$e) {\n";
        $content .= "            // Rollback transaction on error\n";
        $content .= "            \$conn->rollback();\n";
        $content .= "            \n";
        $content .= "            \$response = ['success' => false, 'message' => \$e->getMessage()];\n";
        $content .= "        }\n";
        $content .= "        break;\n\n";
        
        return $content;
    }

    /**
     * Generate batch update action for updating multiple records
     * 
     * @return string PHP code for batch update action
     */
    private function generateBatchUpdateAction(): string {
        if (!$this->config['enableBatchOperations']) {
            return "    // Batch operations are disabled\n";
        }
        
        $content = "    // Batch update multiple records\n";
        $content .= "    case 'batch_update':\n";
        $content .= "        // Verify CSRF token\n";
        $content .= "        if (!isset(\$_POST['csrf_token']) || !verify_csrf_token(\$_POST['csrf_token'], 'manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid security token.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Check update permission\n";
        $content .= "        if (!check_permission('update_manage_{$this->tableName}')) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Permission denied to update records.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        \$ids = isset(\$_POST['ids']) ? \$_POST['ids'] : '';\n";
        $content .= "        if (empty(\$ids)) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'No records selected for update.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Parse IDs string to array\n";
        $content .= "        \$idArray = explode(',', \$ids);\n";
        $content .= "        \$idArray = array_map('intval', \$idArray);\n";
        $content .= "        \$idArray = array_filter(\$idArray); // Remove zero values\n\n";
        
        $content .= "        if (empty(\$idArray)) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'Invalid IDs provided.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Determine which fields to update\n";
        $content .= "        \$fieldsToUpdate = [];\n";
        $content .= "        \$updateValues = [];\n";
        $content .= "        \$bindTypes = '';\n\n";
        
        // Generate batch-editable fields
        $batchEditableColumns = [];
        foreach ($this->columns as $column) {
            // Skip primary key, files, passwords, rich content fields, and system fields
            if ($column === $this->primaryKey || 
                in_array($column, ['created_at', 'updated_at', 'created_by', 'updated_by']) ||
                in_array($this->getColumnFormType($column), ['file', 'image', 'password', 'wysiwyg', 'json_textarea'])) {
                continue;
            }
            
            $batchEditableColumns[] = $column;
        }
        
        if (!empty($batchEditableColumns)) {
            $content .= "        // Check each field to see if it should be updated\n";
            
            foreach ($batchEditableColumns as $column) {
                $formType = $this->getColumnFormType($column);
                
                $content .= "        // {$column} field\n";
                $content .= "        if (isset(\$_POST['batch_{$column}'])) {\n";
                
                // Special handling for checkbox/boolean fields
                if (in_array($formType, ['checkbox'])) {
                    $content .= "            \$fieldsToUpdate[] = \"`{$column}` = ?\";\n";
                    $content .= "            \$updateValues[] = isset(\$_POST['batch_{$column}']) ? 1 : 0;\n";
                    $content .= "            \$bindTypes .= 'i';\n";
                } 
                // Special handling for boolean_select fields
                else if ($formType === 'boolean_select') {
                    $content .= "            \$fieldsToUpdate[] = \"`{$column}` = ?\";\n";
                    $content .= "            \$updateValues[] = isset(\$_POST['batch_{$column}']) && \$_POST['batch_{$column}'] ? 1 : 0;\n";
                    $content .= "            \$bindTypes .= 'i';\n";
                }
                // Special handling for multi_select fields
                else if ($formType === 'multi_select') {
                    $content .= "            if (is_array(\$_POST['batch_{$column}'])) {\n";
                    $content .= "                \$fieldsToUpdate[] = \"`{$column}` = ?\";\n";
                    $content .= "                \$updateValues[] = implode(',', \$_POST['batch_{$column}']);\n";
                    $content .= "                \$bindTypes .= 's';\n";
                    $content .= "            }\n";
                }
                // Standard field handling
                else {
                    if ($this->isColumnNullable($column)) {
                        $content .= "            \$fieldsToUpdate[] = \"`{$column}` = ?\";\n";
                        $content .= "            \$updateValues[] = empty(\$_POST['batch_{$column}']) ? null : \$_POST['batch_{$column}'];\n";
                        $content .= "            \$bindTypes .= '" . ($formType === 'number' ? "i" : "s") . "';\n";
                    } else {
                        $content .= "            \$fieldsToUpdate[] = \"`{$column}` = ?\";\n";
                        $content .= "            \$updateValues[] = \$_POST['batch_{$column}'];\n";
                        $content .= "            \$bindTypes .= '" . ($formType === 'number' ? "i" : "s") . "';\n";
                    }
                }
                
                $content .= "        }\n\n";
            }
        }
        
        $content .= "        // No fields selected for update\n";
        $content .= "        if (empty(\$fieldsToUpdate)) {\n";
        $content .= "            \$response = ['success' => false, 'message' => 'No fields selected for update.'];\n";
        $content .= "            break;\n";
        $content .= "        }\n\n";
        
        $content .= "        // Begin transaction\n";
        $content .= "        \$conn->begin_transaction();\n\n";
        
        $content .= "        try {\n";
        
        // Add audit fields
        $content .= "            // Add audit fields\n";
        
        if (in_array('updated_at', $this->columns)) {
            $content .= "            \$fieldsToUpdate[] = \"`updated_at` = CURRENT_TIMESTAMP\";\n";
        }
        
        if (in_array('updated_by', $this->columns)) {
            $content .= "            \$fieldsToUpdate[] = \"`updated_by` = ?\";\n";
            $content .= "            \$updateValues[] = get_current_user_id();\n";
            $content .= "            \$bindTypes .= 'i';\n";
        }
        
        $content .= "\n";
        
        $content .= "            // Build the SQL query\n";
        $content .= "            \$sql = \"UPDATE {$this->tableName} SET \" . implode(', ', \$fieldsToUpdate) . \" WHERE {$this->primaryKey} IN (\" . str_repeat('?,', count(\$idArray) - 1) . \"?)\"; \n";
        $content .= "            \n";
        $content .= "            // Prepare statement\n";
        $content .= "            \$stmt = \$conn->prepare(\$sql);\n";
        $content .= "            if (!\$stmt) {\n";
        $content .= "                throw new Exception('Database prepare error: ' . \$conn->error);\n";
        $content .= "            }\n\n";
        
        $content .= "            // All parameters: field values first, then IDs\n";
        $content .= "            \$params = \$updateValues;\n";
        $content .= "            foreach (\$idArray as \$id) {\n";
        $content .= "                \$params[] = \$id;\n";
        $content .= "                \$bindTypes .= 'i';\n";
        $content .= "            }\n\n";
        
        $content .= "            // Bind parameters\n";
        $content .= "            \$stmt->bind_param(\$bindTypes, ...\$params);\n\n";
        
        $content .= "            // Execute update\n";
        $content .= "            if (!\$stmt->execute()) {\n";
        $content .= "                throw new Exception('Error updating records: ' . \$stmt->error);\n";
        $content .= "            }\n\n";
        
        $content .= "            \$affectedRows = \$stmt->affected_rows;\n";
        $content .= "            \$stmt->close();\n\n";
        
        $content .= "            // Commit transaction\n";
        $content .= "            \$conn->commit();\n\n";
        
        $content .= "            \$response = [\n";
        $content .= "                'success' => true,\n";
        $content .= "                'message' => \$affectedRows . ' record(s) updated successfully.',\n";
        $content .= "                'affected_rows' => \$affectedRows\n";
        $content .= "            ];\n";
        $content .= "            \n";
        $content .= "        } catch (Exception \$e) {\n";
        $content .= "            // Rollback transaction on error\n";
        $content .= "            \$conn->rollback();\n";
        $content .= "            \n";
        $content .= "            \$response = ['success' => false, 'message' => \$e->getMessage()];\n";
        $content .= "        }\n";
        $content .= "        break;\n\n";
        
        return $content;
    }

    /**
     * Generate CSV export action case
     * 
     * @return string PHP code for CSV export action
     */


    /**
     * Generate CSV import action case
     * 
     * @return string PHP code for CSV import action
     */
    private function generateImportCsvActionCase(): string {
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));
        
        return "
        case 'import_csv':
            if (!check_permission('create_manage_{$this->tableName}') && !check_permission('update_manage_{$this->tableName}')) {
                http_response_code(403);
                \$response = ['success' => false, 'message' => 'Permission denied for import.'];
                break;
            }
            
            if (!isset(\$_FILES['import_file']) || \$_FILES['import_file']['error'] != UPLOAD_ERR_OK) {
                http_response_code(400);
                \$response = ['success' => false, 'message' => 'No file uploaded or upload error.'];
                break;
            }
            
            // Check file type
            \$fileInfo = pathinfo(\$_FILES['import_file']['name']);
            \$fileExtension = strtolower(\$fileInfo['extension'] ?? '');
            
            if (\$fileExtension !== 'csv') {
                \$response = ['success' => false, 'message' => 'Only CSV files are supported for import.'];
                break;
            }
            
            \$file = \$_FILES['import_file']['tmp_name'];
            \$fileHandle = fopen(\$file, 'r');
            
            if (!\$fileHandle) {
                \$response = ['success' => false, 'message' => 'Could not open uploaded file.'];
                break;
            }
            
            // Check if first row contains headers
            \$hasHeader = isset(\$_POST['has_header']) && \$_POST['has_header'] === 'on';
            
            // Get update key if provided
            \$updateKey = \$_POST['update_key'] ?? '';
            \$allowUpdate = !empty(\$updateKey) && (
                \$updateKey === '{$this->primaryKey}' || 
                in_array([\$updateKey], \$this->uniqueKeys) || 
                array_search(\$updateKey, array_column(\$this->uniqueKeys, 0)) !== false
            );
            
            // Read headers
            \$headers = \$hasHeader ? fgetcsv(\$fileHandle) : null;
            
            if (\$hasHeader && !\$headers) {
                \$response = ['success' => false, 'message' => 'CSV file is empty or not readable.'];
                fclose(\$fileHandle);
                break;
            }
            
            // If no headers provided, use columns as headers (except primary key if auto-increment)
            if (!\$hasHeader) {
                \$headers = array_diff(\$this->columns, \$this->getColumnDef('{$this->primaryKey}', 'attributes', '') === 'AUTO_INCREMENT' ? ['{$this->primaryKey}'] : []);
                // Reset file pointer to beginning
                rewind(\$fileHandle);
            }
            
            // Normalize headers (lowercase, replace space with underscore)
            \$normalizedHeaders = array_map(function(\$h) {
                return strtolower(str_replace(' ', '_', trim(\$h)));
            }, \$headers);
            
            // Map CSV headers to DB columns
            \$columnMap = [];
            \$dbColumnsForImport = array_diff(\$this->columns, ['{$this->primaryKey}']);
            
            foreach (\$normalizedHeaders as \$index => \$csvHeader) {
                // Try direct match
                if (in_array(\$csvHeader, \$dbColumnsForImport)) {
                    \$columnMap[\$index] = \$csvHeader;
                    continue;
                }
                
                // Try matching based on column labels
                foreach (\$this->columnDefinitions as \$dbCol => \$def) {
                    if (isset(\$def['label'])) {
                        \$normalizedLabel = strtolower(str_replace(' ', '_', trim(\$def['label'])));
                        if (\$normalizedLabel === \$csvHeader && in_array(\$dbCol, \$dbColumnsForImport)) {
                            \$columnMap[\$index] = \$dbCol;
                            break;
                        }
                    }
                }
            }
            
            if (empty(\$columnMap)) {
                \$response = [
                    'success' => false, 
                    'message' => 'Could not map CSV headers to any known table columns. Please ensure headers are correct.',
                    'expected_columns' => \$dbColumnsForImport,
                    'found_headers' => \$normalizedHeaders
                ];
                fclose(\$fileHandle);
                break;
            }
            
            // Process the data
            \$insertedRows = 0;
            \$updatedRows = 0;
            \$errorRows = 0;
            \$processedRows = 0;
            \$errorsDetails = [];
            \$rowNum = \$hasHeader ? 1 : 0; // For error reporting (start at 1 if header row exists)
            
            // Start transaction for better data integrity
            \$conn->begin_transaction();
            
            try {
                while ((\$rowData = fgetcsv(\$fileHandle)) !== FALSE) {
                    \$rowNum++;
                    \$processedRows++;
                    \$dataToSave = [];
                    \$errors = [];
                    
                    // Extract data from CSV row based on column mapping
                    foreach (\$columnMap as \$csvIndex => \$dbColumn) {
                        if (!isset(\$rowData[\$csvIndex])) {
                            continue; // Skip if column doesn't exist in this row
                        }
                        
                        \$value = trim(\$rowData[\$csvIndex]);
                        
                        // Basic data type conversion/validation
                        \$def = \$this->getColumnDef(\$dbColumn);
                        \$formType = \$this->getColumnFormType(\$dbColumn);
                        
                        // Handle different data types
                        if (\$this->isColumnNullable(\$dbColumn) && \$value === '') {
                            \$dataToSave[\$dbColumn] = null;
                        } else if (\$formType === 'boolean_select' || \$formType === 'checkbox') {
                            // Convert various representations of boolean values
                            \$dataToSave[\$dbColumn] = (strtolower(\$value) === 'yes' || 
                                                     strtolower(\$value) === 'true' || 
                                                     \$value === '1' || 
                                                     \$value === 1 || 
                                                     \$value === true) ? 1 : 0;
                        } else if (\$formType === 'date' || \$formType === 'datetime-local') {
                            // Try to parse dates
                            if (empty(\$value)) {
                                \$dataToSave[\$dbColumn] = \$this->isColumnNullable(\$dbColumn) ? null : '';
                            } else {
                                try {
                                    \$date = new DateTime(\$value);
                                    \$dataToSave[\$dbColumn] = \$date->format(\$formType === 'date' ? 'Y-m-d' : 'Y-m-d H:i:s');
                                } catch (Exception \$e) {
                                    \$errors[] = \"Invalid date format for column '\$dbColumn'. Expected format: \" . 
                                              (\$formType === 'date' ? 'YYYY-MM-DD' : 'YYYY-MM-DD HH:MM:SS');
                                }
                            }
                        } else if (\$formType === 'number' || strpos(strtoupper(\$def['type'] ?? ''), 'INT') !== false) {
                            // Validate numeric values
                            if (\$value === '') {
                                \$dataToSave[\$dbColumn] = \$this->isColumnNullable(\$dbColumn) ? null : 0;
                            } else if (!is_numeric(\$value)) {
                                \$errors[] = \"Invalid numeric value for column '\$dbColumn': \$value\";
                            } else {
                                \$dataToSave[\$dbColumn] = strpos(strtoupper(\$def['type'] ?? ''), 'INT') !== false ? 
                                                       intval(\$value) : floatval(\$value);
                            }
                        } else if (\$formType === 'json_textarea') {
                            // Basic JSON validation
                            if (\$value === '') {
                                \$dataToSave[\$dbColumn] = \$this->isColumnNullable(\$dbColumn) ? null : '{}';
                            } else {
                                \$jsonData = json_decode(\$value);
                                if (json_last_error() !== JSON_ERROR_NONE) {
                                    \$errors[] = \"Invalid JSON format for column '\$dbColumn'\";
                                } else {
                                    \$dataToSave[\$dbColumn] = \$value;
                                }
                            }
                        } else {
                            // Default: store as string
                            \$dataToSave[\$dbColumn] = \$value;
                        }
                    }
                    
                    // Skip row if there are errors
                    if (!empty(\$errors)) {
                        \$errorRows++;
                        \$errorsDetails[] = [
                            'row' => \$rowNum,
                            'error' => implode('; ', \$errors)
                        ];
                        continue;
                    }
                    
                    // Check if we need to do an update instead of insert
                    \$isUpdate = false;
                    \$updateId = null;
                    
                    if (\$allowUpdate && isset(\$dataToSave[\$updateKey])) {
                        // Try to find existing record based on update key
                        \$findSql = \"SELECT `{$this->primaryKey}` FROM `{$this->tableName}` WHERE `\$updateKey` = ?\";
                        \$findStmt = \$conn->prepare(\$findSql);
                        
                        if (\$findStmt) {
                            \$findValue = \$dataToSave[\$updateKey];
                            \$findType = \$this->getBindTypeForColumn(\$updateKey);
                            \$findStmt->bind_param(\$findType, \$findValue);
                            
                            if (\$findStmt->execute()) {
                                \$findResult = \$findStmt->get_result();
                                if (\$findRow = \$findResult->fetch_assoc()) {
                                    \$isUpdate = true;
                                    \$updateId = \$findRow['{$this->primaryKey}'];
                                }
                            }
                            
                            \$findStmt->close();
                        }
                    }
                    
                    // Now do the insert or update
                    if (\$isUpdate) {
                        // Build UPDATE statement
                        \$updateSql = \"UPDATE `{$this->tableName}` SET \";
                        \$updateFields = [];
                        \$updateTypes = '';
                        \$updateValues = [];
                        
                        foreach (\$dataToSave as \$field => \$value) {
                            \$updateFields[] = \"`\$field` = ?\";
                            \$updateTypes .= \$this->getBindTypeForColumn(\$field);
                            \$updateValues[] = \$value;
                        }
                        
                        // Add updated_at timestamp
                        \$updateFields[] = \"`updated_at` = CURRENT_TIMESTAMP\";
                        
                        // Add updated_by if applicable
                        if (in_array('updated_by', \$this->columns) && function_exists('get_current_user_id')) {
                            \$current_user_id = get_current_user_id();
                            \$updateFields[] = \"`updated_by` = \$current_user_id\";
                        }
                        
                        \$updateSql .= implode(', ', \$updateFields) . \" WHERE `{$this->primaryKey}` = ?\";
                        \$updateTypes .= 'i'; // Add type for primary key
                        \$updateValues[] = \$updateId;
                        
                        \$updateStmt = \$conn->prepare(\$updateSql);
                        if (!\$updateStmt) {
                            throw new Exception(\"Failed to prepare update query: \" . \$conn->error);
                        }
                        
                        \$updateStmt->bind_param(\$updateTypes, ...\$updateValues);
                        
                        if (!\$updateStmt->execute()) {
                            throw new Exception(\"Failed to execute update query: \" . \$updateStmt->error);
                        }
                        
                        \$updateStmt->close();
                        \$updatedRows++;
                    } else {
                        // Build INSERT statement
                        \$insertSql = \"INSERT INTO `{$this->tableName}` (\" . 
                                  implode(', ', array_map(function(\$field) { return \"`\$field`\"; }, array_keys(\$dataToSave)));
                        
                        // Add timestamps
                        \$insertSql .= \", `created_at`\";
                        if (in_array('updated_at', \$this->columns)) {
                            \$insertSql .= \", `updated_at`\";
                        }
                        
                        // Add user fields if applicable
                        if (in_array('created_by', \$this->columns) && function_exists('get_current_user_id')) {
                            \$insertSql .= \", `created_by`\";
                        }
                        if (in_array('updated_by', \$this->columns) && function_exists('get_current_user_id')) {
                            \$insertSql .= \", `updated_by`\";
                        }
                        
                        \$insertSql .= \") VALUES (\" . implode(', ', array_fill(0, count(\$dataToSave), '?'));
                        
                        // Add timestamp values
                        \$insertSql .= \", CURRENT_TIMESTAMP\";
                        if (in_array('updated_at', \$this->columns)) {
                            \$insertSql .= \", CURRENT_TIMESTAMP\";
                        }
                        
                        // Add user values if applicable
                        if (in_array('created_by', \$this->columns) && function_exists('get_current_user_id')) {
                            \$current_user_id = get_current_user_id();
                            \$insertSql .= \", \$current_user_id\";
                        }
                        if (in_array('updated_by', \$this->columns) && function_exists('get_current_user_id')) {
                            \$current_user_id = get_current_user_id();
                            \$insertSql .= \", \$current_user_id\";
                        }
                        
                        \$insertSql .= \")\";
                        
                        \$insertTypes = '';
                        \$insertValues = [];
                        
                        foreach (\$dataToSave as \$field => \$value) {
                            \$insertTypes .= \$this->getBindTypeForColumn(\$field);
                            \$insertValues[] = \$value;
                        }
                        
                        \$insertStmt = \$conn->prepare(\$insertSql);
                        if (!\$insertStmt) {
                            throw new Exception(\"Failed to prepare insert query: \" . \$conn->error);
                        }
                        
                        if (!empty(\$insertTypes)) {
                            \$insertStmt->bind_param(\$insertTypes, ...\$insertValues);
                        }
                        
                        if (!\$insertStmt->execute()) {
                            throw new Exception(\"Failed to execute insert query: \" . \$insertStmt->error);
                        }
                        
                        \$insertStmt->close();
                        \$insertedRows++;
                    }
                }
                
                // Commit the transaction
                \$conn->commit();
                
                \$response = [
                    'success' => true,
                    'message' => 'CSV imported successfully.',
                    'processed_rows' => \$processedRows,
                    'inserted_rows' => \$insertedRows,
                    'updated_rows' => \$updatedRows,
                    'error_rows' => \$errorRows
                ];
                
                // Include error details if any
                if (!empty(\$errorsDetails)) {
                    \$response['errors_details'] = \$errorsDetails;
                }
            } catch (Exception \$e) {
                // Roll back the transaction on error
                \$conn->rollback();
                
                error_log(\"Import CSV failed for {$this->tableName}: \" . \$e->getMessage());
                \$response = [
                    'success' => false,
                    'message' => 'Import failed: ' . \$e->getMessage(),
                    'processed_rows' => \$processedRows,
                    'inserted_rows' => 0,
                    'updated_rows' => 0,
                    'error_rows' => \$processedRows
                ];
            } finally {
                fclose(\$fileHandle);
            }
            break;
";
    }
}
?>