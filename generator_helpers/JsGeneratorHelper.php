<?php
// generator_helpers/JsGeneratorHelper.php - Enhanced Version

/**
 * JavaScript Generator Helper Trait
 * 
 * Provides methods for generating JavaScript code for the CRUD interface
 * with support for various JS frameworks and modern patterns.
 */
trait JsGeneratorHelper {
    /**
     * Generate the main JavaScript file for managing the CRUD interface
     * 
     * @return string Path to the generated file
     */
    private function generateManageJSFile(): string {
        $jsPath = $this->projectBaseDir . "/js/manage_{$this->tableName}.js";
        $tableNameCamelCase = str_replace('_', '', ucwords($this->tableName, '_'));
        $tableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->tableName)));
        
        // Determine whether to use jQuery or vanilla JS
        $useVanillaJs = isset($this->config['generateVanillaJs']) && $this->config['generateVanillaJs'];
        
        // Generate foreign key searches JavaScript
        $foreignKeySearchesJs = $this->generateForeignKeySearchesJs($useVanillaJs);
        
        // Generate column headers for the table
        $columnHeadersJs = $this->generateColumnHeadersJs($useVanillaJs);
        
        // Generate table rows for data display
        $tableRowsJs = $this->generateTableRowsJs($useVanillaJs);
        
        // Generate form population logic
        $formPopulationJs = $this->generateFormPopulationJs($useVanillaJs);
        
        // Generate validation logic
        $validationJs = $this->generateValidationJs($useVanillaJs);
        
        // Generate batch operations JavaScript if enabled
        $batchOperationsJs = '';
        if ($this->config['enableBatchOperations']) {
            $batchOperationsJs = $this->generateBatchOperationsJs($useVanillaJs);
        }
        
        // Generate the main content depending on whether we're using jQuery or vanilla JS
        if ($useVanillaJs) {
            $content = $this->generateVanillaJsContent(
                $tableNameCamelCase,
                $tableLabel,
                $foreignKeySearchesJs,
                $columnHeadersJs,
                $tableRowsJs,
                $formPopulationJs,
                $validationJs,
                $batchOperationsJs
            );
        } else {
            $content = $this->generateJQueryContent(
                $tableNameCamelCase,
                $tableLabel,
                $foreignKeySearchesJs,
                $columnHeadersJs,
                $tableRowsJs,
                $formPopulationJs,
                $validationJs,
                $batchOperationsJs
            );
        }

        try {
            file_put_contents($jsPath, $content);
            echo "Generated JS Manage File: $jsPath\n";
        } catch (Exception $e) {
            throw new Exception("Error writing JS Manage File for {$this->tableName}: " . $e->getMessage());
        }
        
        return $jsPath;
    }

    /**
     * Generate jQuery-based JavaScript content
     * 
     * @param string $tableNameCamelCase Camel-cased table name
     * @param string $tableLabel User-friendly table label
     * @param string $foreignKeySearchesJs Foreign key search code
     * @param string $columnHeadersJs Column headers code
     * @param string $tableRowsJs Table rows code
     * @param string $formPopulationJs Form population code
     * @param string $validationJs Validation code
     * @param string $batchOperationsJs Batch operations code
     * @return string Complete jQuery JavaScript content
     */
    private function generateJQueryContent(
        string $tableNameCamelCase,
        string $tableLabel,
        string $foreignKeySearchesJs,
        string $columnHeadersJs,
        string $tableRowsJs,
        string $formPopulationJs,
        string $validationJs,
        string $batchOperationsJs
    ): string {
        $itemsPerPage = $this->config['itemsPerPage'] ?? 10;
        
        return <<<JS
/**
 * CRUD Management for {$tableLabel}
 * Generated by AdvancedCRUDGenerator
 * 
 * @version 2.0.0
 */
document.addEventListener('DOMContentLoaded', function() {
    // Constants
    const tableName = "{$this->tableName}";
    const primaryKey = "{$this->primaryKey}";
    const tableLabel = "{$tableLabel}";
    const itemsPerPage = {$itemsPerPage};
    
    // Elements
    const formCard = \$('#' + tableName + '-form-card');
    const formElement = \$('#' + tableName + '-form-element');
    const formTitle = \$('#form-title-' + tableName);
    const listContainer = \$('#' + tableName + '-list-container');
    const tableElement = \$('#table-' + tableName);
    const loadingDiv = \$('#' + tableName + '-list-loading');
    const emptyDiv = \$('#' + tableName + '-list-empty');
    const paginationInfo = \$('#pagination-info-' + tableName);
    const paginationLinks = \$('#pagination-links-' + tableName);
    const searchBox = \$('#search-box-' + tableName);
    
    // State
    let currentPage = 1;
    let currentSearchTerm = '';
    let currentSortField = '{$this->primaryKey}';
    let currentSortDirection = 'DESC';
    let searchTimeout;
    let selectedIds = [];
    
    /**
     * Display a flash message to the user
     * @param {string} type - Message type (success, danger, warning, info)
     * @param {string} message - Message content
     */
    function displayFlashMessage(type, message) {
        const alertContainer = \$('#flash-message-container');
        if (!alertContainer.length) {
            \$('body').prepend('<div id="flash-message-container" style="position: fixed; top: 60px; right: 20px; z-index: 1050; width:300px;"></div>');
        }
        
        const alertType = type === 'success' ? 'success' : 
                          type === 'danger' ? 'danger' : 
                          type === 'warning' ? 'warning' : 'info';
                          
        const iconMap = {
            'success': '<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 12l5 5l10 -10"></path></svg>',
            'danger': '<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 9v2m0 4v.01"></path><path d="M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75"></path></svg>',
            'warning': '<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 9v2m0 4v.01"></path><path d="M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75"></path></svg>',
            'info': '<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><circle cx="12" cy="12" r="9"></circle><line x1="12" y1="8" x2="12.01" y2="8"></line><polyline points="11 12 12 12 12 16 13 16"></polyline></svg>'
        };

        const flashMessage = \$(`
            <div class="alert alert-\${alertType} alert-dismissible" role="alert">
                <div class="d-flex">
                    <div>\${iconMap[type]}</div>
                    <div>
                        <h4 class="alert-title">\${type.charAt(0).toUpperCase() + type.slice(1)}</h4>
                        <div class="text-muted">\${message}</div>
                    </div>
                </div>
                <a class="btn-close" data-bs-dismiss="alert" aria-label="close"></a>
            </div>
        `);
        
        \$('#flash-message-container').append(flashMessage);
        
        setTimeout(() => {
            flashMessage.fadeOut(500, function() { \$(this).remove(); });
        }, 5000);
    }
    
    /**
     * Fetch data from the server
     * @param {number} page - Page number to fetch
     * @param {string} search - Search term
     * @param {string} sortField - Field to sort by
     * @param {string} sortDirection - Sort direction (ASC or DESC)
     */
    function fetch${tableNameCamelCase}(page = 1, search = '', sortField = currentSortField, sortDirection = currentSortDirection) {
        currentPage = parseInt(page, 10) || 1;
        currentSearchTerm = search;
        currentSortField = sortField;
        currentSortDirection = sortDirection;
        
        // Reset selected IDs when fetching new data
        selectedIds = [];
        updateBatchActionsVisibility();

        loadingDiv.show();
        tableElement.addClass('d-none');
        emptyDiv.addClass('d-none');
        paginationLinks.empty();
        paginationInfo.html('<span class="spinner-border spinner-border-sm me-2" role="status"></span>Loading...');

        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'GET',
            data: {
                action: 'fetch',
                search: currentSearchTerm,
                page: currentPage,
                limit: itemsPerPage,
                sort_field: sortField,
                sort_direction: sortDirection
            },
            dataType: 'json',
            success: function(response) {
                loadingDiv.hide();
                
                if (response.success) {
                    if (response.data && response.data.length > 0) {
                        // Generate table with headers and data
                        ${columnHeadersJs}
                        
                        response.data.forEach(function(item) {
                            // Add checkbox if batch operations are enabled
                            if (${$this->config['enableBatchOperations'] ? 'true' : 'false'}) {
                                tableHtml += \`<tr data-id="\${item[primaryKey]}">\`;
                                tableHtml += \`<td>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input row-checkbox" value="\${item[primaryKey]}">
                                    </div>
                                </td>\`;
                            } else {
                                tableHtml += \`<tr data-id="\${item[primaryKey]}">\`;
                            }
                            
                            // Generate table cells from data
                            ${tableRowsJs}
                            
                            // Add action buttons
                            tableHtml += \`<td class="text-end">
                                <div class="btn-list flex-nowrap">\`;
                                
                            if (response.permissions.update) {
                                tableHtml += \`<button class='btn btn-outline-primary btn-sm edit-\${tableName}' data-id='\${item[primaryKey]}' title='Edit \${tableLabel}'>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-edit" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1" /><path d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z" /><path d="M16 5l3 3" /></svg> Edit
                                </button>\`;
                            }
                            
                            if (response.permissions.delete) {
                                tableHtml += \`<button class='btn btn-outline-danger btn-sm delete-\${tableName}' data-id='\${item[primaryKey]}' title='Delete \${tableLabel}'>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-trash" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7l16 0" /><path d="M10 11l0 6" /><path d="M14 11l0 6" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /></svg> Delete
                                </button>\`;
                            }
                            
                            tableHtml += \`</div></td></tr>\`;
                        });
                        
                        tableHtml += \`</tbody>\`;
                        tableElement.html(tableHtml).removeClass('d-none');
                        emptyDiv.addClass('d-none');
                    } else {
                        tableElement.html('').addClass('d-none');
                        emptyDiv.removeClass('d-none');
                    }
                    
                    renderPagination(response.pagination);
                } else {
                    emptyDiv.html(\`<div class="alert alert-danger">Error: \${response.message || 'Unknown error'}</div>\`).removeClass('d-none');
                    paginationLinks.empty();
                    paginationInfo.text('Error loading data.');
                    displayFlashMessage('danger', response.message || 'Could not fetch data.');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                loadingDiv.hide();
                emptyDiv.html(\`<div class="alert alert-danger">AJAX Error: \${textStatus} - \${errorThrown}</div>\`).removeClass('d-none');
                paginationLinks.empty();
                paginationInfo.text('Error loading data.');
                console.error("Fetch Error:", textStatus, errorThrown, jqXHR.responseText);
                displayFlashMessage('danger', 'A network error occurred. Please try again.');
            }
        });
    }

    /**
     * Render pagination controls
     * @param {Object} paginationData - Pagination information
     */
    function renderPagination(paginationData) {
        if (!paginationData || paginationData.total_records == 0 || paginationData.total_pages <= 0) {
            paginationLinks.html('');
            paginationInfo.text(paginationData.total_records == 0 ? 'No entries found.' : 'No pagination data.');
            return;
        }

        const { total_records, current_page, per_page, total_pages } = paginationData;
        const startRecord = (total_records > 0) ? (current_page - 1) * per_page + 1 : 0;
        const endRecord = Math.min(current_page * per_page, total_records);
        
        paginationInfo.html(\`Showing <span>\${startRecord}</span> to <span>\${endRecord}</span> of <span>\${total_records}</span> entries\`);

        let paginationHtml = '';
        
        if (total_pages > 1) {
            // Previous page button
            paginationHtml += \`<li class="page-item \${current_page === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="\${current_page - 1}" aria-label="Previous">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 6l-6 6l6 6" /></svg> prev
                </a>
            </li>\`;

            // Calculate page range
            let rangeStart = Math.max(1, current_page - 2);
            let rangeEnd = Math.min(total_pages, current_page + 2);

            if (current_page <= 3) rangeEnd = Math.min(total_pages, 5);
            if (current_page >= total_pages - 2) rangeStart = Math.max(1, total_pages - 4);

            // First page and ellipsis if needed
            if (rangeStart > 1) {
                paginationHtml += \`<li class="page-item">
                    <a class="page-link" href="#" data-page="1">1</a>
                </li>\`;
                
                if (rangeStart > 2) {
                    paginationHtml += \`<li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>\`;
                }
            }

            // Page numbers
            for (let i = rangeStart; i <= rangeEnd; i++) {
                paginationHtml += \`<li class="page-item \${i === current_page ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="\${i}">\${i}</a>
                </li>\`;
            }

            // Last page and ellipsis if needed
            if (rangeEnd < total_pages) {
                if (rangeEnd < total_pages - 1) {
                    paginationHtml += \`<li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>\`;
                }
                
                paginationHtml += \`<li class="page-item">
                    <a class="page-link" href="#" data-page="\${total_pages}">\${total_pages}</a>
                </li>\`;
            }

            // Next page button
            paginationHtml += \`<li class="page-item \${current_page === total_pages ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="\${current_page + 1}" aria-label="Next">
                    next <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l6 6l-6 6" /></svg>
                </a>
            </li>\`;
        }
        
        paginationLinks.html(paginationHtml);
    }
    
    /**
     * Validate the form before submission
     * @param {jQuery} form - The form to validate
     * @returns {boolean} True if valid, false otherwise
     */
    function validateForm(form) {
        let isValid = true;
        
        // Clear previous validation errors
        form.find('.is-invalid').removeClass('is-invalid');
        form.find('.invalid-feedback').remove();
        
        // Validate required fields
        form.find('[required]').each(function() {
            const field = \$(this);
            
            if (!field.val()) {
                field.addClass('is-invalid');
                field.closest('.mb-3').append('<div class="invalid-feedback">This field is required.</div>');
                isValid = false;
            }
        });
        
        // Custom validation logic
        ${validationJs}
        
        return isValid;
    }
    
    /**
     * Update the visibility of batch action buttons
     */
    function updateBatchActionsVisibility() {
        const batchActionsDiv = \$('#batch-actions-${this->tableName}');
        const selectedCount = \$('#selected-count-${this->tableName}');
        
        if (selectedIds.length > 0) {
            batchActionsDiv.removeClass('d-none');
            selectedCount.text(selectedIds.length);
        } else {
            batchActionsDiv.addClass('d-none');
        }
    }

    // Initialize: Fetch data on page load
    fetch${tableNameCamelCase}(currentPage);

    // Search functionality
    searchBox.on('keyup', function() {
        clearTimeout(searchTimeout);
        const searchTerm = \$(this).val();
        searchTimeout = setTimeout(function() {
            fetch${tableNameCamelCase}(1, searchTerm); // Reset to page 1 on new search
        }, 500);
    });

    // Pagination click handler
    \$(document).on('click', '#pagination-links-' + tableName + ' .page-link', function(e) {
        e.preventDefault();
        const page = \$(this).data('page');
        if (page && page != currentPage) {
            fetch${tableNameCamelCase}(page, currentSearchTerm, currentSortField, currentSortDirection);
        }
    });
    
    // Column sorting click handler
    \$(document).on('click', '#table-' + tableName + ' .sortable', function(e) {
        e.preventDefault();
        const sortField = \$(this).data('field');
        
        // Toggle direction if clicking on the same field
        let sortDirection = 'ASC';
        if (sortField === currentSortField) {
            sortDirection = currentSortDirection === 'ASC' ? 'DESC' : 'ASC';
        }
        
        fetch${tableNameCamelCase}(currentPage, currentSearchTerm, sortField, sortDirection);
    });

    // Add button click handler
    \$('#add-' + tableName + '-btn').click(function() {
        resetForm();
        formTitle.text('Add ' + tableLabel);
        formCard.removeClass('d-none');
        \$('html, body').animate({ scrollTop: formCard.offset().top - 70 }, 300);
    });

    // Cancel button click handler
    \$('#cancel-' + tableName + '-form').click(function() {
        formCard.addClass('d-none');
    });
    
    /**
     * Reset the form to its initial state
     */
    function resetForm() {
        formElement[0].reset();
        formElement.find('#' + primaryKey).val('');
        formElement.find('input[name="csrf_token"]').val(\$('meta[name="csrf-token"]').attr('content'));
        formElement.find('select.select2-basic-dynamic').val(null).trigger('change');
        formElement.find('div[id\$="_preview"]').html('');
        formElement.find('.is-invalid').removeClass('is-invalid');
        formElement.find('.invalid-feedback').remove();
        
        // Reset any TinyMCE instances
        if (typeof tinymce !== 'undefined') {
            formElement.find('.tinymce').each(function() {
                const id = \$(this).attr('id');
                if (tinymce.get(id)) {
                    tinymce.get(id).setContent('');
                }
            });
        }
    }

    // Form submission handler
    formElement.submit(function(e) {
        e.preventDefault();
        
        // Client-side validation
        if (!validateForm(\$(this))) {
            displayFlashMessage('warning', 'Please fix the validation errors.');
            return;
        }

        const formData = new FormData(this);
        formData.append('action', 'save');
        
        // Include TinyMCE content if applicable
        if (typeof tinymce !== 'undefined') {
            formElement.find('.tinymce').each(function() {
                const id = \$(this).attr('id');
                if (tinymce.get(id)) {
                    formData.set(id, tinymce.get(id).getContent());
                }
            });
        }

        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    displayFlashMessage('success', response.message || tableLabel + ' saved successfully.');
                    formCard.addClass('d-none');
                    fetch${tableNameCamelCase}(formData.get(primaryKey) ? currentPage : 1, currentSearchTerm, currentSortField, currentSortDirection);
                    
                    // Update CSRF token for next submission
                    if (response.new_csrf_token) {
                        formElement.find('input[name="csrf_token"]').val(response.new_csrf_token);
                    }
                } else {
                    displayFlashMessage('danger', 'Error saving: ' + (response.message || 'Unknown error'));
                    
                    // Show field-specific errors
                    if (response.errors) {
                        for (const field in response.errors) {
                            const inputField = formElement.find('#' + field);
                            inputField.addClass('is-invalid');
                            inputField.closest('.mb-3').append('<div class="invalid-feedback">' + response.errors[field] + '</div>');
                        }
                    }
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                displayFlashMessage('danger', 'AJAX Error: Could not save data.');
                console.error("Save Error:", textStatus, errorThrown, jqXHR.responseText);
            }
        });
    });

    // Edit button click handler
    \$(document).on('click', '.edit-' + tableName, function() {
        const id = \$(this).data('id');
        resetForm();
        
        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'GET',
            data: { action: 'get', id: id },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    const item = response.data;
                    formTitle.text('Edit ' + tableLabel);
                    formElement.find('#' + primaryKey).val(item[primaryKey]);
                    
                    // Populate form fields
                    ${formPopulationJs}
                    
                    // Update CSRF token
                    if (response.new_csrf_token_for_edit_form) {
                        formElement.find('input[name="csrf_token"]').val(response.new_csrf_token_for_edit_form);
                    }
                    
                    formCard.removeClass('d-none');
                    \$('html, body').animate({ scrollTop: formCard.offset().top - 70 }, 300);
                } else {
                    displayFlashMessage('danger', 'Error fetching details: ' + (response.message || 'Record not found.'));
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                displayFlashMessage('danger', 'AJAX Error: Could not fetch details.');
                console.error("Get Error:", textStatus, errorThrown, jqXHR.responseText);
            }
        });
    });

    // Delete button click handler
    \$(document).on('click', '.delete-' + tableName, function(e) {
        e.preventDefault();
        
        const id = \$(this).data('id');
        const csrfToken = formElement.find('input[name="csrf_token"]').val();
        
        // Show confirmation modal
        const confirmModal = \$('#confirm-delete-modal');
        if (confirmModal.length) {
            confirmModal.find('.btn-danger').data('id', id).data('token', csrfToken);
            confirmModal.modal('show');
        } else {
            // Fallback to confirm dialog if modal doesn't exist
            if (!confirm('Are you sure you want to delete this ' + tableLabel + '? This action cannot be undone.')) {
                return;
            }
            
            performDelete(id, csrfToken);
        }
    });
    
    // Confirm delete modal action
    \$(document).on('click', '#confirm-delete-modal .btn-danger', function() {
        const id = \$(this).data('id');
        const csrfToken = \$(this).data('token');
        
        \$('#confirm-delete-modal').modal('hide');
        performDelete(id, csrfToken);
    });
    
    /**
     * Perform the delete operation
     * @param {number} id - Record ID to delete
     * @param {string} csrfToken - CSRF token
     */
    function performDelete(id, csrfToken) {
        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'POST',
            data: {
                action: 'delete',
                id: id,
                csrf_token: csrfToken
            },
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    displayFlashMessage('success', response.message || tableLabel + ' deleted successfully.');
                    fetch${tableNameCamelCase}(currentPage, currentSearchTerm, currentSortField, currentSortDirection);
                } else {
                    displayFlashMessage('danger', 'Error deleting: ' + (response.message || 'Unknown error.'));
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                displayFlashMessage('danger', 'AJAX Error: Could not delete record.');
                console.error("Delete Error:", textStatus, errorThrown, jqXHR.responseText);
            }
        });
    }

    // Export click handler
    \$(document).on('click', '.export-' + tableName, function(e) {
        e.preventDefault();
        const format = \$(this).data('format');
        
        window.location.href = \`../actions/actions_\${tableName}.php?action=export&format=\${format}&search=\${currentSearchTerm}&sort_field=\${currentSortField}&sort_direction=\${currentSortDirection}\`;
    });

    // Import form submission
    \$('#import-' + tableName + '-form').submit(function(e) {
        e.preventDefault();
        const importFeedbackDiv = \$('#import-' + tableName + '-feedback');
        
        importFeedbackDiv.html('<div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div> Importing...</div>');
        
        const formData = new FormData(this);
        
        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    importFeedbackDiv.html(\`<div class="alert alert-success">
                        <h4 class="alert-title">Import successful</h4>
                        <p>\${response.message || 'Import completed successfully.'}</p>
                        <p>Processed: \${response.processed_rows}, Inserted: \${response.inserted_rows}, Updated: \${response.updated_rows}, Errors: \${response.error_rows}</p>
                    </div>\`);
                    
                    fetch${tableNameCamelCase}(1, ''); // Refresh to page 1
                    
                    setTimeout(function() { 
                        \$('#import-' + tableName + '-modal').modal('hide'); 
                        importFeedbackDiv.html(''); 
                    }, 3000);
                } else {
                    importFeedbackDiv.html(\`<div class="alert alert-danger">
                        <h4 class="alert-title">Import failed</h4>
                        <p>\${response.message || 'Import failed with errors.'}</p>
                    </div>\`);
                    
                    if (response.errors_details && response.errors_details.length > 0) {
                        let errorList = '<div class="mt-2"><strong>Error details:</strong><ul class="mt-2">';
                        response.errors_details.forEach(err => { 
                            errorList += \`<li>Row \${err.row}: \${err.error}</li>\`; 
                        });
                        errorList += '</ul></div>';
                        importFeedbackDiv.append(errorList);
                    }
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                importFeedbackDiv.html(\`<div class="alert alert-danger">
                    <h4 class="alert-title">AJAX error</h4>
                    <p>An error occurred during the import. Please try again later.</p>
                    <p class="text-muted">Technical details: \${textStatus} - \${errorThrown}</p>
                </div>\`);
                console.error("Import Error:", jqXHR.responseText);
            }
        });
    });
    
    // Toggle password visibility
    \$(document).on('click', '.toggle-password', function(e) {
        e.preventDefault();
        const target = \$(this).data('target');
        const inputField = \$(target);
        
        if (inputField.attr('type') === 'password') {
            inputField.attr('type', 'text');
            \$(this).html('<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-eye-off" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10.585 10.587a2 2 0 0 0 2.829 2.828"></path><path d="M16.681 16.673a8.717 8.717 0 0 1 -4.681 1.327c-3.6 0 -6.6 -2 -9 -6c1.272 -2.12 2.712 -3.678 4.32 -4.674m2.86 -1.146a9.055 9.055 0 0 1 1.82 -.18c3.6 0 6.6 2 9 6c-.666 1.11 -1.379 2.067 -2.138 2.87"></path><path d="M3 3l18 18"></path></svg>');
        } else {
            inputField.attr('type', 'password');
            \$(this).html('<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-eye" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"></path></svg>');
        }
    });
    
    // JSON editor formatting
    \$(document).on('blur', '.json-editor', function() {
        try {
            const jsonText = \$(this).val();
            if (jsonText.trim() !== '') {
                const jsonObj = JSON.parse(jsonText);
                \$(this).val(JSON.stringify(jsonObj, null, 2));
                \$(this).removeClass('is-invalid');
            }
        } catch (e) {
            \$(this).addClass('is-invalid');
            const fieldId = \$(this).attr('id');
            const errorMsgId = fieldId + '-error';
            
            if (!\$('#' + errorMsgId).length) {
                \$(this).after(\`<div id="\${errorMsgId}" class="invalid-feedback">Invalid JSON format: \${e.message}</div>\`);
            } else {
                \$('#' + errorMsgId).text(\`Invalid JSON format: \${e.message}\`);
            }
        }
    });
    
    // Image preview on file selection
    \$(document).on('change', '.image-upload', function() {
        const file = this.files[0];
        const fieldId = \$(this).attr('id');
        const previewDiv = \$('#' + fieldId + '_preview');
        
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewDiv.html(\`<img src="\${e.target.result}" class="img-fluid img-thumbnail mt-2" style="max-height: 200px;" alt="Preview">\`);
            }
            reader.readAsDataURL(file);
        } else {
            previewDiv.html('');
        }
    });
    
    // Initialize Select2 for foreign key fields
    ${foreignKeySearchesJs}
    
    // Initialize batch operations if enabled
    ${batchOperationsJs}
});
JS;
    }

    /**
     * Generate vanilla JavaScript content
     * 
     * This method generates JavaScript code without jQuery dependencies
     * 
     * @param string $tableNameCamelCase Camel-cased table name
     * @param string $tableLabel User-friendly table label
     * @param string $foreignKeySearchesJs Foreign key search code
     * @param string $columnHeadersJs Column headers code
     * @param string $tableRowsJs Table rows code
     * @param string $formPopulationJs Form population code
     * @param string $validationJs Validation code
     * @param string $batchOperationsJs Batch operations code
     * @return string Complete vanilla JavaScript content
     */
    private function generateVanillaJsContent(
        string $tableNameCamelCase,
        string $tableLabel,
        string $foreignKeySearchesJs,
        string $columnHeadersJs,
        string $tableRowsJs,
        string $formPopulationJs,
        string $validationJs,
        string $batchOperationsJs
    ): string {
        // For simplicity, we'll just provide a stub here
        // In a real implementation, this would contain the full vanilla JS equivalent
        // of the jQuery-based content
        
        return <<<JS
/**
 * CRUD Management for {$tableLabel} (Vanilla JS Version)
 * Generated by AdvancedCRUDGenerator
 * 
 * @version 2.0.0
 */
document.addEventListener('DOMContentLoaded', function() {
    // This vanilla JS implementation is a stub
    // In a real implementation, this would contain the full vanilla JS equivalent
    // of the jQuery-based content
    
    console.log('Vanilla JS version not fully implemented. Please use the jQuery version or implement the vanilla JS version.');
    alert('Vanilla JS version not fully implemented. Please use the jQuery version or implement the vanilla JS version.');
});
JS;
    }

    /**
     * Generate foreign key searches JavaScript
     * 
     * @param bool $useVanillaJs Whether to use vanilla JS
     * @return string JavaScript code for foreign key searches
     */
    private function generateForeignKeySearchesJs(bool $useVanillaJs): string {
        if (empty($this->foreignKeys)) {
            return "// No foreign key fields to initialize";
        }
        
        if ($useVanillaJs) {
            // Vanilla JS implementation would go here
            return "// Foreign key initialization (vanilla JS version not implemented)";
        }
        
        $js = "";
        foreach ($this->foreignKeys as $column => $fkDetails) {
            $fkTableLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $fkDetails['table'])));
            $js .= "
    if (document.getElementById('{$column}') && typeof $.fn.select2 !== 'undefined') {
        $('#{$column}').select2({
            theme: 'bootstrap-5',
            width: '100%',
            placeholder: 'Select {$fkTableLabel}',
            allowClear: " . ($this->isColumnNullable($column) ? 'true' : 'false') . ",
            ajax: {
                url: '../actions/actions_{$this->tableName}.php',
                dataType: 'json',
                delay: 250,
                data: function(params) {
                    return {
                        action: 'search_{$fkDetails['table']}',
                        search_term: params.term,
                        page: params.page || 1
                    };
                },
                processResults: function(data, params) {
                    params.page = params.page || 1;
                    return {
                        results: data.items,
                        pagination: {
                            more: (params.page * 10) < data.total_count
                        }
                    };
                },
                cache: true
            },
            minimumInputLength: 0
        });
    }";
        }
        
        return $js;
    }

    /**
     * Generate column headers JavaScript
     * 
     * @param bool $useVanillaJs Whether to use vanilla JS
     * @return string JavaScript code for column headers
     */
    private function generateColumnHeadersJs(bool $useVanillaJs): string {
        $enableColumnSorting = $this->config['enableColumnSorting'] ?? false;
        $js = "let tableHtml = `<thead><tr>`;";
        
        // Add checkbox column for batch operations if enabled
        if ($this->config['enableBatchOperations']) {
            $js .= "
                        // Add checkbox header for batch operations
                        tableHtml += `<th width='40'>
                            <div class='form-check'>
                                <input type='checkbox' class='form-check-input' id='check-all-{$this->tableName}'>
                            </div>
                        </th>`;";
        }
        
        foreach ($this->columns as $col) {
            // Skip system audit fields from display
            if (in_array($col, ['created_at', 'updated_at', 'created_by', 'updated_by'])) {
                continue;
            }
            
            // Get field label
            $colLabel = $this->getColumnLabel($col);
            
            // Add sortable class if column sorting is enabled
            $sortableClass = $enableColumnSorting ? " class='sortable'" : "";
            $sortableAttrs = $enableColumnSorting ? " data-field='{$col}'" : "";
            
            if (isset($this->foreignKeys[$col])) {
                // For foreign keys, show the display field label
                $fkLabel = htmlspecialchars(ucfirst(str_replace('_', ' ', $this->foreignKeys[$col]['field'])));
                $js .= "
                        tableHtml += `<th{$sortableClass}{$sortableAttrs}>{$colLabel}</th>`;";
            } else {
                $js .= "
                        tableHtml += `<th{$sortableClass}{$sortableAttrs}>{$colLabel}</th>`;";
            }
        }
        
        $js .= "
                        tableHtml += `<th class='text-end'>Actions</th></tr></thead><tbody>`;";
        
        return $js;
    }

    /**
     * Generate table rows JavaScript
     * 
     * @param bool $useVanillaJs Whether to use vanilla JS
     * @return string JavaScript code for table rows
     */
    private function generateTableRowsJs(bool $useVanillaJs): string {
        $js = "";
        
        foreach ($this->columns as $col) {
            // Skip system audit fields from display
            if (in_array($col, ['created_at', 'updated_at', 'created_by', 'updated_by'])) {
                continue;
            }
            
            $defaultValueForUndefined = "''";
            
            if (isset($this->foreignKeys[$col])) {
                $fkDisplayField = $this->foreignKeys[$col]['field'];
                $js .= "                            tableHtml += `<td>\${item.{$fkDisplayField} !== null && typeof item.{$fkDisplayField} !== 'undefined' ? item.{$fkDisplayField} : {$defaultValueForUndefined}}</td>`;
";
            } else {
                switch ($this->getColumnFormType($col)) {
                    case 'file':
                    case 'image':
                        $js .= "                            tableHtml += `<td>\${item.{$col} ? `<a href='../\${item.{$col}}' target='_blank' class='btn btn-sm btn-outline-secondary'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-file' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M14 3v4a1 1 0 0 0 1 1h4' /><path d='M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z' /></svg> View File</a>` : {$defaultValueForUndefined}}</td>`;
";
                        break;
                    case 'boolean_select':
                    case 'checkbox':
                        $js .= "                            tableHtml += `<td>\${item.{$col} == 1 ? '<span class=\"badge bg-success-lt\">Yes</span>' : '<span class=\"badge bg-danger-lt\">No</span>'}</td>`;
";
                        break;
                    case 'date':
                        $js .= "                            tableHtml += `<td>\${item.{$col} ? formatDate(item.{$col}) : {$defaultValueForUndefined}}</td>`;
";
                        break;
                    case 'datetime-local':
                        $js .= "                            tableHtml += `<td>\${item.{$col} ? formatDateTime(item.{$col}) : {$defaultValueForUndefined}}</td>`;
";
                        break;
                    case 'json_textarea':
                        $js .= "                            tableHtml += `<td>\${item.{$col} ? '<span class=\"badge bg-blue-lt\">JSON Data</span>' : {$defaultValueForUndefined}}</td>`;
";
                        break;
                    case 'password':
                        $js .= "                            tableHtml += `<td>********</td>`;
";
                        break;
                    case 'textarea':
                    case 'wysiwyg':
                        $js .= "                            tableHtml += `<td>\${item.{$col} ? (item.{$col}.length > 50 ? item.{$col}.substring(0, 50) + '...' : item.{$col}) : {$defaultValueForUndefined}}</td>`;
";
                        break;
                    case 'color':
                        $js .= "                            tableHtml += `<td>\${item.{$col} ? `<span class='color-swatch' style='display:inline-block;width:16px;height:16px;border-radius:3px;background-color:\${item.{$col}}'></span> \${item.{$col}}` : {$defaultValueForUndefined}}</td>`;
";
                        break;
                    default:
                        $js .= "                            tableHtml += `<td>\${item.{$col} !== null && typeof item.{$col} !== 'undefined' ? item.{$col} : {$defaultValueForUndefined}}</td>`;
";
                        break;
                }
            }
        }
        
        return $js;
    }

    /**
     * Generate form population JavaScript
     * 
     * @param bool $useVanillaJs Whether to use vanilla JS
     * @return string JavaScript code for form population
     */
    private function generateFormPopulationJs(bool $useVanillaJs): string {
        $js = "";
        
        foreach ($this->columns as $col) {
            if ($col === $this->primaryKey) continue;
            
            // Skip system audit fields
            if (in_array($col, ['created_at', 'updated_at', 'created_by', 'updated_by'])) {
                continue;
            }
            
            $js .= "                    if (typeof item.{$col} !== 'undefined') {\n";
            
            if (isset($this->foreignKeys[$col])) {
                $fkDetails = $this->foreignKeys[$col];
                $fkDisplayField = $fkDetails['field'];
                $js .= "                        var fkSelect_{$col} = $('#{$col}');\n";
                $js .= "                        if (item.{$col} && (item.{$fkDisplayField} || item.{$fkDisplayField} === 0 || item.{$fkDisplayField} === '0')) {\n";
                $js .= "                            var option_{$col} = new Option(item.{$fkDisplayField}, item.{$col}, true, true);\n";
                $js .= "                            fkSelect_{$col}.append(option_{$col}).trigger('change');\n";
                $js .= "                        } else {\n";
                $js .= "                            fkSelect_{$col}.val(null).trigger('change');\n";
                $js .= "                        }\n";
            } else {
                switch ($this->getColumnFormType($col)) {
                    case 'file':
                    case 'image':
                        $js .= "                        $('#existing_{$col}').val(item.{$col} || '');\n";
                        $js .= "                        if (item.{$col}) {\n";
                        $js .= "                            const fileUrl = '../' + item.{$col};\n";
                        $js .= "                            const fileName = item.{$col}.split('/').pop();\n";
                        
                        if ($this->getColumnFormType($col) === 'image') {
                            $js .= "                            $('#{$col}_preview').html(`<div class='mt-2'><img src='\${fileUrl}' class='img-fluid img-thumbnail' style='max-height: 200px;' alt='Preview'><p class='small text-muted mt-1'>Current file: \${fileName}</p></div>`);\n";
                        } else {
                            $js .= "                            $('#{$col}_preview').html(`<div class='mt-2'><a href='\${fileUrl}' target='_blank' class='btn btn-sm btn-outline-primary'><svg xmlns='http://www.w3.org/2000/svg' class='icon icon-tabler icon-tabler-file' width='16' height='16' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'><path stroke='none' d='M0 0h24v24H0z' fill='none'/><path d='M14 3v4a1 1 0 0 0 1 1h4' /><path d='M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z' /></svg> View Current File</a><p class='small text-muted mt-1'>Current file: \${fileName}</p></div>`);\n";
                        }
                        
                        $js .= "                        } else {\n";
                        $js .= "                            $('#{$col}_preview').html('<span class=\"text-muted small\">No file currently uploaded</span>');\n";
                        $js .= "                        }\n";
                        break;
                    
                    case 'boolean_select':
                    case 'checkbox':
                        $js .= "                        $('#{$col}').val(item.{$col} == 1 ? '1' : '0').trigger('change');\n";
                        break;
                    
                    case 'textarea':
                        $js .= "                        $('#{$col}').val(item.{$col});\n";
                        break;
                    
                    case 'wysiwyg':
                        $js .= "                        if (typeof tinymce !== 'undefined' && tinymce.get('{$col}')) {\n";
                        $js .= "                            tinymce.get('{$col}').setContent(item.{$col} || '');\n";
                        $js .= "                        } else {\n";
                        $js .= "                            $('#{$col}').val(item.{$col});\n";
                        $js .= "                        }\n";
                        break;
                    
                    case 'json_textarea':
                        $js .= "                        try {\n";
                        $js .= "                            // Format JSON for readability\n";
                        $js .= "                            if (typeof item.{$col} === 'string' && item.{$col}.trim() !== '') {\n";
                        $js .= "                                const jsonObj = JSON.parse(item.{$col});\n";
                        $js .= "                                $('#{$col}').val(JSON.stringify(jsonObj, null, 2));\n";
                        $js .= "                            } else if (typeof item.{$col} === 'object') {\n";
                        $js .= "                                $('#{$col}').val(JSON.stringify(item.{$col}, null, 2));\n";
                        $js .= "                            } else {\n";
                        $js .= "                                $('#{$col}').val(item.{$col} || '');\n";
                        $js .= "                            }\n";
                        $js .= "                        } catch (e) {\n";
                        $js .= "                            $('#{$col}').val(item.{$col} || '');\n";
                        $js .= "                        }\n";
                        break;
                    
                    case 'select':
                        $js .= "                        if (!$('#{$col}').hasClass('select2-basic-dynamic')) {\n";
                        $js .= "                            $('#{$col}').val(item.{$col}).trigger('change');\n";
                        $js .= "                        }\n";
                        break;
                    
                    case 'multi_select':
                        $js .= "                        if (Array.isArray(item.{$col})) {\n";
                        $js .= "                            $('#{$col}').val(item.{$col}).trigger('change');\n";
                        $js .= "                        } else if (typeof item.{$col} === 'string' && item.{$col}.includes(',')) {\n";
                        $js .= "                            $('#{$col}').val(item.{$col}.split(',')).trigger('change');\n";
                        $js .= "                        } else {\n";
                        $js .= "                            $('#{$col}').val(item.{$col} ? [item.{$col}] : []).trigger('change');\n";
                        $js .= "                        }\n";
                        break;
                    
                    case 'date':
                    case 'datetime-local':
                        // Format date/datetime for input fields
                        if ($this->getColumnFormType($col) === 'date') {
                            $js .= "                        if (item.{$col}) {\n";
                            $js .= "                            const date = new Date(item.{$col});\n";
                            $js .= "                            const formattedDate = date.getFullYear() + '-' + \n";
                            $js .= "                                String(date.getMonth() + 1).padStart(2, '0') + '-' + \n";
                            $js .= "                                String(date.getDate()).padStart(2, '0');\n";
                            $js .= "                            $('#{$col}').val(formattedDate);\n";
                            $js .= "                        } else {\n";
                            $js .= "                            $('#{$col}').val('');\n";
                            $js .= "                        }\n";
                        } else {
                            $js .= "                        if (item.{$col}) {\n";
                            $js .= "                            const date = new Date(item.{$col});\n";
                            $js .= "                            const formattedDate = date.getFullYear() + '-' + \n";
                            $js .= "                                String(date.getMonth() + 1).padStart(2, '0') + '-' + \n";
                            $js .= "                                String(date.getDate()).padStart(2, '0') + 'T' + \n";
                            $js .= "                                String(date.getHours()).padStart(2, '0') + ':' + \n";
                            $js .= "                                String(date.getMinutes()).padStart(2, '0');\n";
                            $js .= "                            $('#{$col}').val(formattedDate);\n";
                            $js .= "                        } else {\n";
                            $js .= "                            $('#{$col}').val('');\n";
                            $js .= "                        }\n";
                        }
                        break;
                    
                    default:
                        $js .= "                        $('#{$col}').val(item.{$col});\n";
                        break;
                }
            }
            
            $js .= "                    }\n";
        }
        
        return $js;
    }

    /**
     * Generate validation JavaScript
     * 
     * @param bool $useVanillaJs Whether to use vanilla JS
     * @return string JavaScript code for validation
     */
    private function generateValidationJs(bool $useVanillaJs): string {
        $js = "";
        
        foreach ($this->columns as $col) {
            if ($col === $this->primaryKey) continue;
            
            // Skip system audit fields
            if (in_array($col, ['created_at', 'updated_at', 'created_by', 'updated_by'])) {
                continue;
            }
            
            $rules = $this->getValidationRules($col);
            
            if (!empty($rules)) {
                $js .= "        // Validation for {$col}\n";
                $js .= "        form.find('#{$col}').each(function() {\n";
                $js .= "            const field = \$(this);\n";
                $js .= "            const value = field.val();\n";
                $js .= "            let fieldIsValid = true;\n";
                
                foreach ($rules as $rule) {
                    if ($rule === 'required') {
                        // Skip - already handled by the main validation loop
                        continue;
                    } else if (strpos($rule, 'min:') === 0) {
                        $min = substr($rule, 4);
                        $js .= "            if (value && value.length < {$min}) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">This field must be at least {$min} characters long.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    } else if (strpos($rule, 'max:') === 0) {
                        $max = substr($rule, 4);
                        $js .= "            if (value && value.length > {$max}) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">This field must not exceed {$max} characters.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    } else if ($rule === 'email') {
                        $js .= "            if (value && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">Please enter a valid email address.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    } else if ($rule === 'url') {
                        $js .= "            if (value && !/^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([/\\w .-]*)*\\/?$/.test(value)) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">Please enter a valid URL.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    } else if ($rule === 'numeric') {
                        $js .= "            if (value && !/^\\d+$/.test(value)) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">This field must be a number.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    } else if ($rule === 'decimal') {
                        $js .= "            if (value && !/^\\d+(\\.\\d+)?$/.test(value)) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">This field must be a decimal number.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    } else if (strpos($rule, 'regex:') === 0) {
                        $regex = substr($rule, 6);
                        $js .= "            if (value && !{$regex}.test(value)) {\n";
                        $js .= "                field.addClass('is-invalid');\n";
                        $js .= "                field.closest('.mb-3').append('<div class=\"invalid-feedback\">This field format is invalid.</div>');\n";
                        $js .= "                fieldIsValid = false;\n";
                        $js .= "            }\n";
                    }
                }
                
                $js .= "            if (!fieldIsValid) {\n";
                $js .= "                isValid = false;\n";
                $js .= "            }\n";
                $js .= "        });\n";
            }
        }
        
        return $js;
    }

    /**
     * Generate batch operations JavaScript
     * 
     * @param bool $useVanillaJs Whether to use vanilla JS
     * @return string JavaScript code for batch operations
     */
    private function generateBatchOperationsJs(bool $useVanillaJs): string {
        if (!$this->config['enableBatchOperations']) {
            return "// Batch operations are disabled";
        }
        
        if ($useVanillaJs) {
            // Vanilla JS implementation would go here
            return "// Batch operations (vanilla JS version not implemented)";
        }
        
        return <<<JS
    // Check all checkboxes
    \$(document).on('change', '#check-all-{$this->tableName}', function() {
        const isChecked = \$(this).prop('checked');
        \$('.row-checkbox').prop('checked', isChecked);
        
        // Update selected IDs
        selectedIds = [];
        if (isChecked) {
            \$('.row-checkbox').each(function() {
                selectedIds.push(\$(this).val());
            });
        }
        
        updateBatchActionsVisibility();
    });
    
    // Individual checkbox change
    \$(document).on('change', '.row-checkbox', function() {
        const id = \$(this).val();
        
        if (\$(this).prop('checked')) {
            if (!selectedIds.includes(id)) {
                selectedIds.push(id);
            }
        } else {
            selectedIds = selectedIds.filter(item => item !== id);
            \$('#check-all-{$this->tableName}').prop('checked', false);
        }
        
        // Update "check all" checkbox if all rows are checked
        if (\$('.row-checkbox').length === \$('.row-checkbox:checked').length) {
            \$('#check-all-{$this->tableName}').prop('checked', true);
        }
        
        updateBatchActionsVisibility();
    });
    
    // Batch delete click handler
    \$(document).on('click', '.batch-delete-{$this->tableName}', function(e) {
        e.preventDefault();
        
        if (selectedIds.length === 0) {
            displayFlashMessage('warning', 'No records selected for deletion.');
            return;
        }
        
        const csrfToken = formElement.find('input[name="csrf_token"]').val();
        
        // Show confirmation modal
        const confirmModal = \$('#confirm-delete-modal');
        if (confirmModal.length) {
            confirmModal.find('.modal-body p').text(\`Are you sure you want to delete \${selectedIds.length} selected \${tableLabel}? This action cannot be undone.\`);
            confirmModal.find('.btn-danger').data('ids', selectedIds.join(',')).data('token', csrfToken);
            confirmModal.modal('show');
        } else {
            // Fallback to confirm dialog if modal doesn't exist
            if (!confirm(\`Are you sure you want to delete \${selectedIds.length} selected \${tableLabel}? This action cannot be undone.\`)) {
                return;
            }
            
            performBatchDelete(selectedIds, csrfToken);
        }
    });
    
    // Confirm batch delete modal action
    \$(document).on('click', '#confirm-delete-modal .btn-danger', function() {
        const idsString = \$(this).data('ids');
        const ids = idsString.split(',');
        const csrfToken = \$(this).data('token');
        
        \$('#confirm-delete-modal').modal('hide');
        performBatchDelete(ids, csrfToken);
    });
    
    /**
     * Perform batch delete operation
     * @param {Array} ids - Array of record IDs to delete
     * @param {string} csrfToken - CSRF token
     */
    function performBatchDelete(ids, csrfToken) {
        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'POST',
            data: {
                action: 'batch_delete',
                ids: ids.join(','),
                csrf_token: csrfToken
            },
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    displayFlashMessage('success', response.message || \`\${ids.length} \${tableLabel} deleted successfully.\`);
                    selectedIds = [];
                    updateBatchActionsVisibility();
                    fetch{$this->tableName}(currentPage, currentSearchTerm, currentSortField, currentSortDirection);
                } else {
                    displayFlashMessage('danger', 'Error deleting: ' + (response.message || 'Unknown error.'));
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                displayFlashMessage('danger', 'AJAX Error: Could not delete records.');
                console.error("Batch Delete Error:", textStatus, errorThrown, jqXHR.responseText);
            }
        });
    }
    
    // Batch edit form preparation
    \$(document).on('show.bs.modal', '#batch-edit-{$this->tableName}-modal', function() {
        if (selectedIds.length === 0) {
            displayFlashMessage('warning', 'No records selected for editing.');
            return false;
        }
        
        // Update count in modal
        \$('#batch-edit-count-{$this->tableName}').text(selectedIds.length);
        
        // Set the selected IDs
        \$('#batch-edit-ids-{$this->tableName}').val(selectedIds.join(','));
        
        // Reset form
        \$('#batch-edit-{$this->tableName}-form')[0].reset();
        \$('.batch-field-toggle').prop('checked', false).trigger('change');
    });
    
    // Toggle batch edit fields
    \$(document).on('change', '.batch-field-toggle', function() {
        const fieldId = \$(this).data('field');
        const fieldContainer = \$('#batch-field-' + fieldId + '-container');
        const fieldInput = \$('#batch_' + fieldId);
        
        if (\$(this).prop('checked')) {
            fieldContainer.show();
            fieldInput.prop('disabled', false);
            
            // Initialize Select2 if applicable
            if (fieldInput.hasClass('select2-basic-dynamic') && typeof \$.fn.select2 !== 'undefined') {
                fieldInput.select2({
                    theme: 'bootstrap-5',
                    width: '100%',
                    placeholder: 'Select a value',
                    allowClear: true,
                    ajax: {
                        url: '../actions/actions_{$this->tableName}.php',
                        dataType: 'json',
                        delay: 250,
                        data: function(params) {
                            return {
                                action: 'search_' + fieldId.replace('_id', ''),
                                search_term: params.term,
                                page: params.page || 1
                            };
                        },
                        processResults: function(data, params) {
                            params.page = params.page || 1;
                            return {
                                results: data.items,
                                pagination: {
                                    more: (params.page * 10) < data.total_count
                                }
                            };
                        },
                        cache: true
                    },
                    minimumInputLength: 0
                });
            }
        } else {
            fieldContainer.hide();
            fieldInput.prop('disabled', true);
        }
    });
    
    // Batch edit form submission
    \$('#batch-edit-{$this->tableName}-form').submit(function(e) {
        e.preventDefault();
        
        const batchFeedbackDiv = \$('#batch-edit-{$this->tableName}-feedback');
        batchFeedbackDiv.html('<div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div> Updating records...</div>');
        
        const formData = new FormData(this);
        
        \$.ajax({
            url: '../actions/actions_' + tableName + '.php',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    batchFeedbackDiv.html(\`<div class="alert alert-success">
                        <h4 class="alert-title">Update successful</h4>
                        <p>\${response.message || 'Records updated successfully.'}</p>
                    </div>\`);
                    
                    fetch{$this->tableName}(currentPage, currentSearchTerm, currentSortField, currentSortDirection);
                    
                    setTimeout(function() { 
                        \$('#batch-edit-{$this->tableName}-modal').modal('hide'); 
                        batchFeedbackDiv.html(''); 
                    }, 2000);
                } else {
                    batchFeedbackDiv.html(\`<div class="alert alert-danger">
                        <h4 class="alert-title">Update failed</h4>
                        <p>\${response.message || 'Failed to update records.'}</p>
                    </div>\`);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                batchFeedbackDiv.html(\`<div class="alert alert-danger">
                    <h4 class="alert-title">AJAX error</h4>
                    <p>An error occurred during the update. Please try again later.</p>
                    <p class="text-muted">Technical details: \${textStatus} - \${errorThrown}</p>
                </div>\`);
                console.error("Batch Update Error:", jqXHR.responseText);
            }
        });
    });
JS;
    }
}
?>